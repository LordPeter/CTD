#######################
# Initialization events
# 
# by LordPeter
#######################

namespace = CTD

######################
# ranges CTD.0001-0099
######################

### Initial Assignment on startup

character_event = {	# SINGLE-PROVINCE-EVENT Player character fires an invisible event that targets all provinces, since provinces can not directly be targeted via on_startup
	id = CTD.0001
	desc = CTDDESC_0001		# Generic "invisible" localisation
	
	hide_window = yes
	
	is_triggered_only = yes	# via on_action "on_startup"	# was "on_chronicle_start", but that causes issues with nomads...
	
	trigger = {	# should only be fired once, no more if global flag has been set (to avoid weirdness with ruler-designed characters)
		NOT = {
			has_global_flag = FPS_module_running_CTD
		}
	}
	
	immediate = {
		# Set golbal flag to allow other modules to be aware of each other (and also to prevent this event firing again, because of a ruler-designer bug)
		set_global_flag = FPS_module_running_CTD
		
		# Initialize global variables
		set_variable = {
			which = global_import_priority_comparison_variable	# <- This is a global variable!
			value = 0
		}
		set_variable = {
			which = global_reference_number_of_provinces_variable	# <- This is a global variable!
			value = 0
		}
		
		# Just for a mapmode test:
		any_province = {
			if = {
				limit = {
					num_of_max_settlements == 1
				}
				change_variable = {
					which = province_mapmode_thingy_settlements
					value = 1
				}
			}
			if = {
				limit = {
					num_of_max_settlements == 2
				}
				change_variable = {
					which = province_mapmode_thingy_settlements
					value = 2
				}
			}
			if = {
				limit = {
					num_of_max_settlements == 3
				}
				change_variable = {
					which = province_mapmode_thingy_settlements
					value = 3
				}
			}
			if = {
				limit = {
					num_of_max_settlements == 4
				}
				change_variable = {
					which = province_mapmode_thingy_settlements
					value = 4
				}
			}
			if = {
				limit = {
					num_of_max_settlements == 5
				}
				change_variable = {
					which = province_mapmode_thingy_settlements
					value = 5
				}
			}
			if = {
				limit = {
					num_of_max_settlements == 6
				}
				change_variable = {
					which = province_mapmode_thingy_settlements
					value = 6
				}
			}
			if = {
				limit = {
					num_of_max_settlements == 7
				}
				change_variable = {
					which = province_mapmode_thingy_settlements
					value = 7
				}
			}
			county = {	# the county
				dejure_liege_title = {	# the de jure duchy
					if = {
						limit = {
							PREVPREV = {
								is_variable_equal = {
									which = province_mapmode_thingy_settlements
									value = 1
								}
							}
						}
						change_variable = {
							which = duchy_holding_count_variable
							value = 1
						}
					}
					if = {
						limit = {
							PREVPREV = {
								is_variable_equal = {
									which = province_mapmode_thingy_settlements
									value = 2
								}
							}
						}
						change_variable = {
							which = duchy_holding_count_variable
							value = 2
						}
					}
					if = {
						limit = {
							PREVPREV = {
								is_variable_equal = {
									which = province_mapmode_thingy_settlements
									value = 3
								}
							}
						}
						change_variable = {
							which = duchy_holding_count_variable
							value = 3
						}
					}
					if = {
						limit = {
							PREVPREV = {
								is_variable_equal = {
									which = province_mapmode_thingy_settlements
									value = 4
								}
							}
						}
						change_variable = {
							which = duchy_holding_count_variable
							value = 4
						}
					}
					if = {
						limit = {
							PREVPREV = {
								is_variable_equal = {
									which = province_mapmode_thingy_settlements
									value = 5
								}
							}
						}
						change_variable = {
							which = duchy_holding_count_variable
							value = 5
						}
					}
					if = {
						limit = {
							PREVPREV = {
								is_variable_equal = {
									which = province_mapmode_thingy_settlements
									value = 6
								}
							}
						}
						change_variable = {
							which = duchy_holding_count_variable
							value = 6
						}
					}
					if = {
						limit = {
							PREVPREV = {
								is_variable_equal = {
									which = province_mapmode_thingy_settlements
									value = 7
								}
							}
						}
						change_variable = {
							which = duchy_holding_count_variable
							value = 7
						}
					}
				}
			}
		}
		
		any_province = {	# NOTE: Expensive, but only used once for an entire campaign
			# Assign a climate:
			assign_climate_on_startup_CTD_effect = yes
			
			# Adjust Reference Variable "Number of Provinces":
			change_variable = {
				which = global_reference_number_of_provinces_variable
				value = 1	# Increase by 1 for every province currently in the game, so that it dynamically has the correct number for later reference (even if India is disabled etc)
			}
			# MAJOR modifier:
			add_province_modifier = {
				name = province_economy_major_modifier
				duration = -1
			}
			# Dummy Tradegood modifiers:
			# add_province_modifier = {	# NOTE TESTING commented these out for now
				# name = tradegood_slot_dummy_resource_1
				# duration = -1
			# }
			# add_province_modifier = {
				# name = tradegood_slot_dummy_resource_2
				# duration = -1
			# }
			# add_province_modifier = {
				# name = tradegood_slot_dummy_resource_3
				# duration = -1
			# }
			# add_province_modifier = {
				# name = tradegood_slot_dummy_refined_1
				# duration = -1
			# }
			# add_province_modifier = {
				# name = tradegood_slot_dummy_refined_2
				# duration = -1
			# }
			# add_province_modifier = {
				# name = tradegood_slot_dummy_refined_3
				# duration = -1
			# }
			# add_province_modifier = {
				# name = tradegood_slot_dummy_finalized_1
				# duration = -1
			# }
			# add_province_modifier = {
				# name = tradegood_slot_dummy_finalized_2
				# duration = -1
			# }
			# add_province_modifier = {
				# name = tradegood_slot_dummy_finalized_3
				# duration = -1
			# }
			# Initialize Trade Variables
			set_variable = {
				which = province_import_priority
				value = 0
			}
			set_variable = {
				which = province_import_export_tradevalue
				value = 0
			}
			# ... and update the value(s):
			update_province_import_priority_CTD_effect = yes
			# Initialize Weather/Disaster Effect Variables:
			set_variable = {
				which = province_temporary_effect_on_agriculture
				value = 0
			}
			set_variable = {
				which = province_temporary_effect_on_livestock
				value = 0
			}
			# Initialize Population Variables
			set_variable = {
				which = province_population_total
				value = 0
			}
			set_variable = {
				which = province_population_peasants
				value = 0
			}
			set_variable = {
				which = province_population_artisans
				value = 0
			}
			set_variable = {
				which = province_population_merchants
				value = 0
			}
			set_variable = {
				which = province_population_elite
				value = 0
			}
			set_variable = {
				which = province_population_special
				value = 0
			}
			set_variable = {
				which = province_population_scum
				value = 0
			}
			set_variable = {
				which = province_population_tribals
				value = 0
			}
			set_variable = {
				which = province_population_slaves
				value = 0
			}
			# Initialize Supply Variables
			set_variable = {
				which = province_supply_food
				value = 0
			}
			set_variable = {
				which = province_supply_clothing
				value = 0
			}
			set_variable = {
				which = province_supply_materials
				value = 0
			}
			set_variable = {
				which = province_supply_luxuries
				value = 0
			}
			# Initialize Demand Variables
			set_variable = {
				which = province_demand_food
				value = 0
			}
			set_variable = {
				which = province_demand_clothing
				value = 0
			}
			set_variable = {
				which = province_demand_materials
				value = 0
			}
			set_variable = {
				which = province_demand_luxuries
				value = 0
			}
			# Initialize Workforce Variables
			set_variable = {
				which = province_workforce_simple_labour
				value = 0
			}
			set_variable = {
				which = province_workforce_craftsmanship
				value = 0
			}
			
			# Set "baseline" resource caps
			change_variable = {
				which = province_cap_mining
				value = 5
			}
			change_variable = {
				which = province_cap_agriculture
				value = 5
			}
			change_variable = {
				which = province_cap_forests
				value = 5
			}
			change_variable = {
				which = province_cap_livestock
				value = 5
			}
			change_variable = {
				which = province_cap_refined
				value = 5
			}
			change_variable = {
				which = province_cap_finalized
				value = 5
			}
			# Also set hidden baseline caps
			change_variable = {
				which = province_cap_wildlife
				value = 5
			}
			change_variable = {
				which = province_cap_vegetation
				value = 5
			}
			# NOTE: The following caps are water-related and thus not influenced by terrain or features on land
			if = {
				limit = {
					OR = {
						port = yes
						borders_major_river = yes
						borders_lake = yes
					}
				}
				change_variable = {
					which = province_cap_fishing
					value = 5
				}
			}
			if = {
				limit = {
					port = yes
				}
				change_variable = {
					which = province_cap_whaling
					value = 5
				}
			}
			if = {
				limit = {
					OR = {
						port = yes
						borders_lake = yes
					}
				}
				change_variable = {
					which = province_cap_diving
					value = 5
				}
			}
			# India gets a flat bonus to agriculture caps to simulate the increased fertility from the monsoon, and thus allow it to sustain its historically larger population:
			if = {	# NOTE: Replace that with a better version depending on monsoon climate, as that's the reason (and not all parts of India are super-fertile)
				limit = {
					region = world_india
				}
				change_variable = {
					which = province_cap_agriculture
					value = 1
				}
				change_variable = {
					which = province_cap_forests
					value = 1
				}
				change_variable = {
					which = province_cap_livestock
					value = 1
				}
			}
			# Initialize base supplies based on local terrain (only food and materials are found in the wild) and also adjust base resource caps ("baseline cap" is currently: 5)
			trigger_switch = {
				on_trigger = terrain
				farmlands = {
					# Supplies:
					change_variable = {
						which = province_supply_food
						value = 9
					}
					change_variable = {
						which = province_supply_materials
						value = 4
					}
					# Resource Caps:
					change_variable = {
						which = province_cap_mining
						value = -1
					}
					change_variable = {
						which = province_cap_agriculture
						value = 3
					}
					change_variable = {
						which = province_cap_forests
						value = -1
					}
					# Livestock: No change
					change_variable = {
						which = province_cap_wildlife
						value = -1
					}
					# Vegetation: No change
				}
				plains = {
					# Supplies:
					change_variable = {
						which = province_supply_food
						value = 7
					}
					change_variable = {
						which = province_supply_materials
						value = 5
					}
					# Resource Caps:
					# Mining: No change
					change_variable = {
						which = province_cap_agriculture
						value = 1
					}
					# Forests: No change
					change_variable = {
						which = province_cap_livestock
						value = 1
					}
					# Wildlife: No change
					# Vegetation: No change
				}
				steppe = {
					# Supplies:
					change_variable = {
						which = province_supply_food
						value = 6
					}
					change_variable = {
						which = province_supply_materials
						value = 4
					}
					# Resource Caps:
					# Mining: No change
					change_variable = {
						which = province_cap_agriculture
						value = 1
					}
					change_variable = {
						which = province_cap_forests
						value = -1
					}
					change_variable = {
						which = province_cap_livestock
						value = 1
					}
					change_variable = {
						which = province_cap_wildlife
						value = 1
					}
					change_variable = {
						which = province_cap_vegetation
						value = -1
					}
				}
				savanna = {
					# Supplies:
					change_variable = {
						which = province_supply_food
						value = 6
					}
					change_variable = {
						which = province_supply_materials
						value = 5
					}
					# Resource Caps:
					# Mining: No change
					# Agriculture: No change
					# Forests: No change
					change_variable = {
						which = province_cap_livestock
						value = 1
					}
					change_variable = {
						which = province_cap_wildlife
						value = 1
					}
					# Vegetation: No change
				}
				jungle = {
					# Supplies:
					change_variable = {
						which = province_supply_food
						value = 5
					}
					change_variable = {
						which = province_supply_materials
						value = 7
					}
					# Resource Caps:
					# Mining: No change
					# Agriculture: No change
					change_variable = {
						which = province_cap_forests
						value = 2
					}
					# Livestock: No change
					# Wildlife: No change
					# Vegetation: No change
				}
				forest = {
					# Supplies:
					change_variable = {
						which = province_supply_food
						value = 5
					}
					change_variable = {
						which = province_supply_materials
						value = 7
					}
					# Resource Caps:
					# Mining: No change
					# Agriculture: No change
					change_variable = {
						which = province_cap_forests
						value = 2
					}
					# Livestock: No change
					change_variable = {
						which = province_cap_wildlife
						value = 1
					}
					change_variable = {
						which = province_cap_vegetation
						value = 1
					}
				}
				hills = {
					# Supplies:
					change_variable = {
						which = province_supply_food
						value = 5
					}
					change_variable = {
						which = province_supply_materials
						value = 6
					}
					# Resource Caps:
					change_variable = {
						which = province_cap_mining
						value = 1
					}
					# Agriculture: No change
					change_variable = {
						which = province_cap_forests
						value = 1
					}
					# Livestock: No change
					# Wildlife: No change
					# Vegetation: No change
				}
				mountain = {
					# Supplies:
					change_variable = {
						which = province_supply_food
						value = 4
					}
					change_variable = {
						which = province_supply_materials
						value = 6
					}
					# Resource Caps:
					change_variable = {
						which = province_cap_mining
						value = 3
					}
					change_variable = {
						which = province_cap_agriculture
						value = -2
					}
					change_variable = {
						which = province_cap_forests
						value = -1
					}
					change_variable = {
						which = province_cap_livestock
						value = -1
					}
					change_variable = {
						which = province_cap_wildlife
						value = -1
					}
					change_variable = {
						which = province_cap_vegetation
						value = -2
					}
				}
				arctic = {
					# Supplies:
					change_variable = {
						which = province_supply_food
						value = 3
					}
					change_variable = {
						which = province_supply_materials
						value = 2
					}
					# Resource Caps:
					change_variable = {
						which = province_cap_mining
						value = -1
					}
					change_variable = {
						which = province_cap_agriculture
						value = -2
					}
					change_variable = {
						which = province_cap_forests
						value = -1
					}
					change_variable = {
						which = province_cap_livestock
						value = -1
					}
					# Wildlife: No change
					change_variable = {
						which = province_cap_vegetation
						value = -1
					}
				}
				desert = {
					# Supplies:
					change_variable = {
						which = province_supply_food
						value = 2
					}
					change_variable = {
						which = province_supply_materials
						value = 3
					}
					# Resource Caps:
					# Mining: No change
					change_variable = {
						which = province_cap_agriculture
						value = -2
					}
					change_variable = {
						which = province_cap_forests
						value = -2
					}
					change_variable = {
						which = province_cap_livestock
						value = -1
					}
					change_variable = {
						which = province_cap_wildlife
						value = -2
					}
					change_variable = {
						which = province_cap_vegetation
						value = -3
					}
				}
			}
			# Initialize dynamic agriculture/livestock caps with static caps
			set_variable = {
				which = province_cap_livestock_dynamic
				which = province_cap_livestock
			}
			set_variable = {
				which = province_cap_agriculture_dynamic
				which = province_cap_agriculture
			}
			# Initialize "generic" supply from current holdings (henceforth done by automation)
			update_province_holding_supply_CTD_effect = yes
			
			# Grow starting pops for every holding, so the world does not start totally unpopulated - NOTE: Possibly also later make it so that later starting dates get more starting population
			# Peasants #1
			any_province_holding = {
				if = {
					limit = {
						can_grow_peasants_CTD_trigger = yes
					}
					incr_peasants_holding_pop_CTD_effect = yes
				}
			}
			# Artisans #1
			any_province_holding = {
				if = {
					limit = {
						can_grow_artisans_CTD_trigger = yes
					}
					incr_artisans_holding_pop_CTD_effect = yes
				}
			}
			# Peasants #2
			any_province_holding = {
				if = {
					limit = {
						can_grow_peasants_CTD_trigger = yes
					}
					incr_peasants_holding_pop_CTD_effect = yes
				}
			}
			# enough for now. The first peasant pop is nigh guaranteed to spawn, the others might not in harsh climate etc. But the world will get a starting population
			# Some love for Nomads which don't get regular pops (all things happen directly in province):
			# (regular) Nomads #1
			if = {
				limit = {
					can_grow_nomads_CTD_trigger = yes
				}
				incr_nomads_province_pop_CTD_effect = yes
			}
			# (regular) Nomads #2
			if = {
				limit = {
					can_grow_nomads_CTD_trigger = yes
				}
				incr_nomads_province_pop_CTD_effect = yes
			}
			# This should get Nomads some starting position that is not totall weak.
			# Recalculate Province Population (holdings probably have pops now)
			recalc_province_pop_CTD_effect = yes
			
			# Initialize modifier localisation (henceforth done by automation)
			# Weather
			set_province_flag = previous_weather_none
			# Food
			if = {
				limit = {
					AND = {
						check_variable = {
							which = province_supply_food
							which = province_demand_food
						}
						NOT = {
							check_variable = {
								which = province_demand_food
								which = province_supply_food
							}
						}
					}
				}
				# Clear old flags
				clr_province_flag = food_supply_mediocre
				clr_province_flag = food_supply_poor
				# Set new flag
				set_province_flag = food_supply_good
			}
			if = {
				limit = {	# Suplly and Demand are equal
					AND = {	# Essentially should do the same thing as "is_variable_equal" by checking from both sides (since is_variable_equal does not seem to work...)
						check_variable = {
							which = province_supply_food
							which = province_demand_food
						}
						check_variable = {
							which = province_demand_food
							which = province_supply_food
						}
					}
				}
				# Clear old flags
				clr_province_flag = food_supply_good
				clr_province_flag = food_supply_poor
				# Set new flag
				set_province_flag = food_supply_mediocre
			}
			if = {
				limit = {	# Demand is lower
					AND = {
						check_variable = {
							which = province_demand_food
							which = province_supply_food
						}
						NOT = {
							check_variable = {
								which = province_supply_food
								which = province_demand_food
							}
						}
					}
				}
				# Clear old flags
				clr_province_flag = food_supply_good
				clr_province_flag = food_supply_mediocre
				# Set new flag
				set_province_flag = food_supply_poor
			}
			# Clothing
			if = {
				limit = {
					AND = {
						check_variable = {
							which = province_supply_clothing
							which = province_demand_clothing
						}
						NOT = {
							check_variable = {
								which = province_demand_clothing
								which = province_supply_clothing
							}
						}
					}
				}
				# Clear old flags
				clr_province_flag = clothing_supply_mediocre
				clr_province_flag = clothing_supply_poor
				# Set new flag
				set_province_flag = clothing_supply_good
			}
			if = {
				limit = {	# Suplly and Demand are equal
					AND = {	# Essentially should do the same thing as "is_variable_equal" by checking from both sides (since is_variable_equal does not seem to work...)
						check_variable = {
							which = province_supply_clothing
							which = province_demand_clothing
						}
						check_variable = {
							which = province_demand_clothing
							which = province_supply_clothing
						}
					}
				}
				# Clear old flags
				clr_province_flag = clothing_supply_good
				clr_province_flag = clothing_supply_poor
				# Set new flag
				set_province_flag = clothing_supply_mediocre
			}
			if = {
				limit = {	# Demand is lower
					AND = {
						check_variable = {
							which = province_demand_clothing
							which = province_supply_clothing
						}
						NOT = {
							check_variable = {
								which = province_supply_clothing
								which = province_demand_clothing
							}
						}
					}
				}
				# Clear old flags
				clr_province_flag = clothing_supply_good
				clr_province_flag = clothing_supply_mediocre
				# Set new flag
				set_province_flag = clothing_supply_poor
			}
			# Materials
			if = {
				limit = {
					AND = {
						check_variable = {
							which = province_supply_materials
							which = province_demand_materials
						}
						NOT = {
							check_variable = {
								which = province_demand_materials
								which = province_supply_materials
							}
						}
					}
				}
				# Clear old flags
				clr_province_flag = materials_supply_mediocre
				clr_province_flag = materials_supply_poor
				# Set new flag
				set_province_flag = materials_supply_good
			}
			if = {
				limit = {	# Suplly and Demand are equal
					AND = {	# Essentially should do the same thing as "is_variable_equal" by checking from both sides (since is_variable_equal does not seem to work...)
						check_variable = {
							which = province_supply_materials
							which = province_demand_materials
						}
						check_variable = {
							which = province_demand_materials
							which = province_supply_materials
						}
					}
				}
				# Clear old flags
				clr_province_flag = materials_supply_good
				clr_province_flag = materials_supply_poor
				# Set new flag
				set_province_flag = materials_supply_mediocre
			}
			if = {
				limit = {	# Demand is lower
					AND = {
						check_variable = {
							which = province_demand_materials
							which = province_supply_materials
						}
						NOT = {
							check_variable = {
								which = province_supply_materials
								which = province_demand_materials
							}
						}
					}
				}
				# Clear old flags
				clr_province_flag = materials_supply_good
				clr_province_flag = materials_supply_mediocre
				# Set new flag
				set_province_flag = materials_supply_poor
			}
			# Luxuries
			if = {
				limit = {
					AND = {
						check_variable = {
							which = province_supply_luxuries
							which = province_demand_luxuries
						}
						NOT = {
							check_variable = {
								which = province_demand_luxuries
								which = province_supply_luxuries
							}
						}
					}
				}
				# Clear old flags
				clr_province_flag = luxuries_supply_mediocre
				clr_province_flag = luxuries_supply_poor
				# Set new flag
				set_province_flag = luxuries_supply_good
			}
			if = {
				limit = {	# Suplly and Demand are equal
					AND = {	# Essentially should do the same thing as "is_variable_equal" by checking from both sides (since is_variable_equal does not seem to work...)
						check_variable = {
							which = province_supply_luxuries
							which = province_demand_luxuries
						}
						check_variable = {
							which = province_demand_luxuries
							which = province_supply_luxuries
						}
					}
				}
				# Clear old flags
				clr_province_flag = luxuries_supply_good
				clr_province_flag = luxuries_supply_poor
				# Set new flag
				set_province_flag = luxuries_supply_mediocre
			}
			if = {
				limit = {	# Demand is lower
					AND = {
						check_variable = {
							which = province_demand_luxuries
							which = province_supply_luxuries
						}
						NOT = {
							check_variable = {
								which = province_supply_luxuries
								which = province_demand_luxuries
							}
						}
					}
				}
				# Clear old flags
				clr_province_flag = luxuries_supply_good
				clr_province_flag = luxuries_supply_mediocre
				# Set new flag
				set_province_flag = luxuries_supply_poor
			}
		} # End of any_province scope
		
		# Update import priority levels once (this is a global issue, don't fire on individual provinces!):
		update_global_import_priority_levels_CTD_effect = yes
		
		# Start daily automation helper event to find month start - only province No. 1 does this! (NOTE: Province No.1 should always exist, that's why...)
		random_province = {	# Scope to province
			limit = {
				province_id = 1	# IMPORTANT
			}
			# Start month search event:
			province_event = {
				id = CTD.0002
				days = 1
			}
		}
	}
}

province_event = {	# SINGLE-PROVINCE-EVENT Global helper event to find start of month, only at gamestart and only for province number one
	id = CTD.0002
	desc = CTDDESC_0001		# Generic "invisible" localisation
	
	hide_window = yes
	
	is_triggered_only = yes	# From event
	
	immediate = {
		# Abort and start weather event in all provinces if month start has been found
		if = {
			limit = {
				OR = {
					AND = {
						has_province_flag = searching_for_month_january
						month = 0
						NOT = {
							month = 1
						}
					}
					AND = {
						has_province_flag = searching_for_month_february
						month = 1
						NOT = {
							month = 2
						}
					}
					AND = {
						has_province_flag = searching_for_month_march
						month = 2
						NOT = {
							month = 3
						}
					}
					AND = {
						has_province_flag = searching_for_month_april
						month = 3
						NOT = {
							month = 4
						}
					}
					AND = {
						has_province_flag = searching_for_month_may
						month = 4
						NOT = {
							month = 5
						}
					}
					AND = {
						has_province_flag = searching_for_month_june
						month = 5
						NOT = {
							month = 6
						}
					}
					AND = {
						has_province_flag = searching_for_month_july
						month = 6
						NOT = {
							month = 7
						}
					}
					AND = {
						has_province_flag = searching_for_month_august
						month = 7
						NOT = {
							month = 8
						}
					}
					AND = {
						has_province_flag = searching_for_month_september
						month = 8
						NOT = {
							month = 9
						}
					}
					AND = {
						has_province_flag = searching_for_month_october
						month = 9
						NOT = {
							month = 10
						}
					}
					AND = {
						has_province_flag = searching_for_month_november
						month = 10
						NOT = {
							month = 11
						}
					}
					AND = {
						has_province_flag = searching_for_month_december
						month = 11
					}
				}
			}
			# TESTING: Inform player
			any_playable_ruler = {
				limit = {
					ai = no
				}
				character_event = {
					id = TST.1
				}
			}
			
			# Determine how long it is until the 1st of October, and make it so that the FIRST of all the import/growth events starts at that date - it later calls all the others directly
			# We know for sure it exactly the 1st of some month - now only need to determine which month. NOTE: trigger_switch not possible, because "0"(January) would evaluate to true for any greater value, too!
			if = {
				limit = {
					AND = {
						month = 0	# January
						NOT = {
							month = 1
						}
					}
				}
				province_event = {
					id = CTD.0105	# Re-calculation of priorities and start of import cycle
					days = 273	# Days it takes until first of October
				}
				any_province = {	# NOTE: Expensive
					# Initialize Quarterly Cycle - used e.g. by event CTD.0101 to keep in sync with the years.
					# IMPORTANT: If not set here, automation event CTD.0101 will not repeat itself!
					set_province_flag = quarterly_repetition_cycle_4	# NOTE: This flag will actually mean the event starts with Cycle 1, where this flag is getting cleared
					# Quarterly Maintenance Event (determines supply level flags):
					province_event = {
						id = CTD.0101
						days = 354	# IMPORTANT order: AFTER the first time event CTD.0105 has first, precisely on the NEXT December 21th, one day before the first population change event (+81 days later than above event)
					}
				}
			}
			if = {
				limit = {
					AND = {
						month = 1	# February
						NOT = {
							month = 2
						}
					}
				}
				province_event = {
					id = CTD.0105	# Re-calculation of priorities and start of import cycle
					days = 242	# Days it takes until first of October
				}
				any_province = {	# NOTE: Expensive
					# Initialize Quarterly Cycle - used e.g. by event CTD.0101 to keep in sync with the years.
					# IMPORTANT: If not set here, automation event CTD.0101 will not repeat itself!
					set_province_flag = quarterly_repetition_cycle_4	# NOTE: This flag will actually mean the event starts with Cycle 1, where this flag is getting cleared
					# Quarterly Maintenance Event (determines supply level flags):
					province_event = {
						id = CTD.0101
						days = 323	# IMPORTANT order: AFTER the first time event CTD.0105 has first, precisely on the NEXT December 21th, one day before the first population change event (+81 days later than above event)
					}
				}
			}
			if = {
				limit = {
					AND = {
						month = 2	# March
						NOT = {
							month = 3
						}
					}
				}
				province_event = {
					id = CTD.0105	# Re-calculation of priorities and start of import cycle
					days = 214	# Days it takes until first of October
				}
				any_province = {	# NOTE: Expensive
					# Initialize Quarterly Cycle - used e.g. by event CTD.0101 to keep in sync with the years.
					# IMPORTANT: If not set here, automation event CTD.0101 will not repeat itself!
					set_province_flag = quarterly_repetition_cycle_4	# NOTE: This flag will actually mean the event starts with Cycle 1, where this flag is getting cleared
					# Quarterly Maintenance Event (determines supply level flags):
					province_event = {
						id = CTD.0101
						days = 295	# IMPORTANT order: AFTER the first time event CTD.0105 has first, precisely on the NEXT December 21th, one day before the first population change event (+81 days later than above event)
					}
				}
			}
			if = {
				limit = {
					AND = {
						month = 3	# April
						NOT = {
							month = 4
						}
					}
				}
				province_event = {
					id = CTD.0105	# Re-calculation of priorities and start of import cycle
					days = 183	# Days it takes until first of October
				}
				any_province = {	# NOTE: Expensive
					# Initialize Quarterly Cycle - used e.g. by event CTD.0101 to keep in sync with the years.
					# IMPORTANT: If not set here, automation event CTD.0101 will not repeat itself!
					set_province_flag = quarterly_repetition_cycle_4	# NOTE: This flag will actually mean the event starts with Cycle 1, where this flag is getting cleared
					# Quarterly Maintenance Event (determines supply level flags):
					province_event = {
						id = CTD.0101
						days = 264	# IMPORTANT order: AFTER the first time event CTD.0105 has first, precisely on the NEXT December 21th, one day before the first population change event (+81 days later than above event)
					}
				}
			}
			if = {
				limit = {
					AND = {
						month = 4	# May
						NOT = {
							month = 5
						}
					}
				}
				province_event = {
					id = CTD.0105	# Re-calculation of priorities and start of import cycle
					days = 153	# Days it takes until first of October
				}
				any_province = {	# NOTE: Expensive
					# Initialize Quarterly Cycle - used e.g. by event CTD.0101 to keep in sync with the years.
					# IMPORTANT: If not set here, automation event CTD.0101 will not repeat itself!
					set_province_flag = quarterly_repetition_cycle_4	# NOTE: This flag will actually mean the event starts with Cycle 1, where this flag is getting cleared
					# Quarterly Maintenance Event (determines supply level flags):
					province_event = {
						id = CTD.0101
						days = 234	# IMPORTANT order: AFTER the first time event CTD.0105 has first, precisely on the NEXT December 21th, one day before the first population change event (+81 days later than above event)
					}
				}
			}
			if = {
				limit = {
					AND = {
						month = 5	# June
						NOT = {
							month = 6
						}
					}
				}
				province_event = {
					id = CTD.0105	# Re-calculation of priorities and start of import cycle
					days = 122	# Days it takes until first of October
				}
				any_province = {	# NOTE: Expensive
					# Initialize Quarterly Cycle - used e.g. by event CTD.0101 to keep in sync with the years.
					# IMPORTANT: If not set here, automation event CTD.0101 will not repeat itself!
					set_province_flag = quarterly_repetition_cycle_4	# NOTE: This flag will actually mean the event starts with Cycle 1, where this flag is getting cleared
					# Quarterly Maintenance Event (determines supply level flags):
					province_event = {
						id = CTD.0101
						days = 203	# IMPORTANT order: AFTER the first time event CTD.0105 has first, precisely on the NEXT December 21th, one day before the first population change event (+81 days later than above event)
					}
				}
			}
			if = {
				limit = {
					AND = {
						month = 6	# July
						NOT = {
							month = 7
						}
					}
				}
				province_event = {
					id = CTD.0105	# Re-calculation of priorities and start of import cycle
					days = 92	# Days it takes until first of October
				}
				any_province = {	# NOTE: Expensive
					# Initialize Quarterly Cycle - used e.g. by event CTD.0101 to keep in sync with the years.
					# IMPORTANT: If not set here, automation event CTD.0101 will not repeat itself!
					set_province_flag = quarterly_repetition_cycle_4	# NOTE: This flag will actually mean the event starts with Cycle 1, where this flag is getting cleared
					# Quarterly Maintenance Event (determines supply level flags):
					province_event = {
						id = CTD.0101
						days = 173	# IMPORTANT order: AFTER the first time event CTD.0105 has first, precisely on the NEXT December 21th, one day before the first population change event (+81 days later than above event)
					}
				}
			}
			if = {
				limit = {
					AND = {
						month = 7	# August
						NOT = {
							month = 8
						}
					}
				}
				province_event = {
					id = CTD.0105	# Re-calculation of priorities and start of import cycle
					days = 61	# Days it takes until first of October
				}
				any_province = {	# NOTE: Expensive
					# Initialize Quarterly Cycle - used e.g. by event CTD.0101 to keep in sync with the years.
					# IMPORTANT: If not set here, automation event CTD.0101 will not repeat itself!
					set_province_flag = quarterly_repetition_cycle_4	# NOTE: This flag will actually mean the event starts with Cycle 1, where this flag is getting cleared
					# Quarterly Maintenance Event (determines supply level flags):
					province_event = {
						id = CTD.0101
						days = 142	# IMPORTANT order: AFTER the first time event CTD.0105 has first, precisely on the NEXT December 21th, one day before the first population change event (+81 days later than above event)
					}
				}
			}
			if = {
				limit = {
					AND = {
						month = 8	# September
						NOT = {
							month = 9
						}
					}
				}
				province_event = {
					id = CTD.0105	# Re-calculation of priorities and start of import cycle
					days = 30	# Days it takes until first of October
				}
				any_province = {	# NOTE: Expensive
					# Initialize Quarterly Cycle - used e.g. by event CTD.0101 to keep in sync with the years.
					# IMPORTANT: If not set here, automation event CTD.0101 will not repeat itself!
					set_province_flag = quarterly_repetition_cycle_4	# NOTE: This flag will actually mean the event starts with Cycle 1, where this flag is getting cleared
					# Quarterly Maintenance Event (determines supply level flags):
					province_event = {
						id = CTD.0101
						days = 111	# IMPORTANT order: AFTER the first time event CTD.0105 has first, precisely on the NEXT December 21th, one day before the first population change event (+81 days later than above event)
					}
				}
			}
			if = {
				limit = {
					AND = {
						month = 9	# October
						NOT = {
							month = 10
						}
					}
				}
				province_event = {
					id = CTD.0105	# Re-calculation of priorities and start of import cycle
					# In this case it is the first of October, no delay needed! (would have been 365 days otherwise)
				}
				any_province = {	# NOTE: Expensive
					# Initialize Quarterly Cycle - used e.g. by event CTD.0101 to keep in sync with the years.
					# IMPORTANT: If not set here, automation event CTD.0101 will not repeat itself!
					set_province_flag = quarterly_repetition_cycle_4	# NOTE: This flag will actually mean the event starts with Cycle 1, where this flag is getting cleared
					# Quarterly Maintenance Event (determines supply level flags):
					province_event = {
						id = CTD.0101
						days = 81	# IMPORTANT order: AFTER the first time event CTD.0105 has first, precisely on the NEXT December 21th, one day before the first population change event (+81 days later than above event)
					}
				}
			}
			if = {
				limit = {
					AND = {
						month = 10	# November
						NOT = {
							month = 11
						}
					}
				}
				province_event = {
					id = CTD.0105	# Re-calculation of priorities and start of import cycle
					days = 334	# Days it takes until first of October
				}
				any_province = {	# NOTE: Expensive
					# Initialize Quarterly Cycle - used e.g. by event CTD.0101 to keep in sync with the years.
					# IMPORTANT: If not set here, automation event CTD.0101 will not repeat itself!
					set_province_flag = quarterly_repetition_cycle_4	# NOTE: This flag will actually mean the event starts with Cycle 1, where this flag is getting cleared
					# Quarterly Maintenance Event (determines supply level flags):
					province_event = {
						id = CTD.0101
						days = 415	# IMPORTANT order: AFTER the first time event CTD.0105 has first, precisely on the NEXT December 21th, one day before the first population change event (+81 days later than above event)
					}
				}
			}
			if = {
				limit = {
					month = 11	# December
				}
				province_event = {
					id = CTD.0105	# Re-calculation of priorities and start of import cycle
					days = 304	# Days it takes until first of October
				}
				any_province = {	# NOTE: Expensive
					# Initialize Quarterly Cycle - used e.g. by event CTD.0101 to keep in sync with the years.
					# IMPORTANT: If not set here, automation event CTD.0101 will not repeat itself!
					set_province_flag = quarterly_repetition_cycle_4	# NOTE: This flag will actually mean the event starts with Cycle 1, where this flag is getting cleared
					# Quarterly Maintenance Event (determines supply level flags):
					province_event = {
						id = CTD.0101
						days = 385	# IMPORTANT order: AFTER the first time event CTD.0105 has first, precisely on the NEXT December 21th, one day before the first population change event (+81 days later than above event)
					}
				}
			}
			
			# Clear all searching flags
			clr_province_flag = searching_for_month_january
			clr_province_flag = searching_for_month_february
			clr_province_flag = searching_for_month_march
			clr_province_flag = searching_for_month_april
			clr_province_flag = searching_for_month_may
			clr_province_flag = searching_for_month_june
			clr_province_flag = searching_for_month_july
			clr_province_flag = searching_for_month_august
			clr_province_flag = searching_for_month_september
			clr_province_flag = searching_for_month_october
			clr_province_flag = searching_for_month_november
			clr_province_flag = searching_for_month_december
			# If Game Rule active, also start weather event in all provinces:
			if = {
				limit = {
					has_game_rule = {
						name = weather
						value = enabled
					}
				}
				any_province = {	# NOTE: Expensive, but only used once per game here
					province_event = {
						id = CTD.0103	# Weather System
					}
				}
			}
			
			# When it has been found, do NOT repeat event again:
			break = yes	# IMPORTANT
		}
		
		# When searching, set flag to search for to next month
		if = {
			limit = {
				AND = {
					month = 0
					NOT = {
						month = 1
					}
				}
			}
			set_province_flag = searching_for_month_february
		}
		if = {
			limit = {
				AND = {
					month = 1
					NOT = {
						month = 2
					}
				}
			}
			set_province_flag = searching_for_month_march
		}
		if = {
			limit = {
				AND = {
					month = 2
					NOT = {
						month = 3
					}
				}
			}
			set_province_flag = searching_for_month_april
		}
		if = {
			limit = {
				AND = {
					month = 3
					NOT = {
						month = 4
					}
				}
			}
			set_province_flag = searching_for_month_may
		}
		if = {
			limit = {
				AND = {
					month = 4
					NOT = {
						month = 5
					}
				}
			}
			set_province_flag = searching_for_month_june
		}
		if = {
			limit = {
				AND = {
					month = 5
					NOT = {
						month = 6
					}
				}
			}
			set_province_flag = searching_for_month_july
		}
		if = {
			limit = {
				AND = {
					month = 6
					NOT = {
						month = 7
					}
				}
			}
			set_province_flag = searching_for_month_august
		}
		if = {
			limit = {
				AND = {
					month = 7
					NOT = {
						month = 8
					}
				}
			}
			set_province_flag = searching_for_month_september
		}
		if = {
			limit = {
				AND = {
					month = 8
					NOT = {
						month = 9
					}
				}
			}
			set_province_flag = searching_for_month_october
		}
		if = {
			limit = {
				AND = {
					month = 9
					NOT = {
						month = 10
					}
				}
			}
			set_province_flag = searching_for_month_november
		}
		if = {
			limit = {
				AND = {
					month = 10
					NOT = {
						month = 11
					}
				}
			}
			set_province_flag = searching_for_month_december
		}
		if = {
			limit = {
				month = 11
			}
			set_province_flag = searching_for_month_january
		}
		
		repeat_event = {
			id = CTD.0002
			days = 1	# Insane, but only at gamestart and for just one province..
		}
	}
}
