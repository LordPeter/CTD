##################
# Decisions events
# 
# by LordPeter
##################

namespace = CTD

######################
# ranges CTD.0401-0499
######################

### Enact Edict

## Growth Incentives

province_event = {	# Province fires invisible event to be in scope, then fires player decision
	id = CTD.0401
	desc =  CTDDESC_0001		# Generic "invisible" localisation
	
	is_triggered_only = yes		# by decision
	
	hide_window = yes
	
	immediate = {
		save_event_target_as = target_edict_province	# save province
		owner = {
			character_event = {	# Give owner actual choice now
				id = CTD.0402
			}
		}
	}
}

character_event = {	# Owner is given edict choice (part 1/3)
	id = CTD.0402
	desc =  CTDDESC_0402
	picture = "GFX_evt_council"
	
	is_triggered_only = yes		# by event
	
	option = {
		name = CTDOPTA_0402	# Growth Incentive: Peasants
		# Cost depends on existing pop amount (cheaper if low pops):
		if = {
			limit = {
				event_target:target_edict_province = {
					NOT = {
						check_variable = {
							which = province_population_peasants
							value = 10
						}
					}
				}
			}
			wealth = -25
		}
		if = {
			limit = {
				event_target:target_edict_province = {
					check_variable = {
						which = province_population_peasants
						value = 10
					}
				}
			}
			wealth = -50
		}
		event_target:target_edict_province = {
			add_province_modifier = {	# Modifier hidden to avoid interface cluttering, but visible in major province modifier
				name = peasants_growth_incentive
				duration = 1825	# 5 years
				hidden = yes
			}
		}
		ai_chance = {
			factor = 1
			modifier = {	# More likely if can be grown currently
				factor = 3
				event_target:target_edict_province = {
					any_province_holding = {
						can_grow_peasants_CTD_trigger = yes
					}
				}
			}
		}
	}
	
	option = {
		name = CTDOPTB_0402	# Growth Incentive: Artisans
		custom_tooltip = {
			text = CTDTOOL_0402
		}
		event_target:target_edict_province = {
			add_province_modifier = {	# Modifier hidden to avoid interface cluttering, but visible in major province modifier
				name = artisans_growth_incentive
				duration = 1825	# 5 years
				hidden = yes
			}
		}
		ai_chance = {
			factor = 1
			modifier = {	# More likely if can be grown currently
				factor = 3
				event_target:target_edict_province = {
					any_province_holding = {
						can_grow_artisans_CTD_trigger = yes
					}
				}
			}
		}
	}
	
	option = {
		name = CTDOPTC_0402	# Growth Incentive: Merchants
		# Cost depends on existing pop amount (cheaper if low pops):
		if = {
			limit = {
				event_target:target_edict_province = {
					NOT = {
						check_variable = {
							which = province_population_merchants
							value = 6
						}
					}
				}
			}
			prestige = -12.5
			wealth = -25
		}
		if = {
			limit = {
				event_target:target_edict_province = {
					check_variable = {
						which = province_population_merchants
						value = 6
					}
				}
			}
			prestige = -25
			wealth = -50
		}
		event_target:target_edict_province = {
			add_province_modifier = {	# Modifier hidden to avoid interface cluttering, but visible in major province modifier
				name = merchants_growth_incentive
				duration = 1825	# 5 years
				hidden = yes
			}
		}
		ai_chance = {
			factor = 1
			modifier = {	# More likely if can be grown currently
				factor = 3
				event_target:target_edict_province = {
					any_province_holding = {
						can_grow_merchants_CTD_trigger = yes
					}
				}
			}
		}
	}
	
	option = {
		name = CTDOPTD_0402	# Show next options
		character_event = {
			id = CTD.0403
		}
																												# NOTE: not correct, needs additive?_modifiers... IMPORTANT
		ai_chance = {
			factor = 5	# 5-times as likely since four cycling options remain
			# modifier = {	# x3 if at least one of the later options could grow (total: 5+2=7)
				# factor = 3
				# any_province_holding = {
					# calc_true_if = {
						# amount = 1
						# can_grow_elite_CTD_trigger = yes
						# OR = {
							# can_grow_soldiers_CTD_trigger = yes
							# can_grow_patricians_CTD_trigger = yes
							# can_grow_clerics_CTD_trigger = yes
						# }
						# can_grow_scum_CTD_trigger = yes
						# will_shrink_scum_CTD_trigger = yes
					# }
				# }
			# }
			# modifier = {	# x2 if at least two of the later options could grow (total: x6)
				# factor = 3
				# any_province_holding = {
					# calc_true_if = {
						# amount = 1
						# can_grow_elite_CTD_trigger = yes
						# OR = {
							# can_grow_soldiers_CTD_trigger = yes
							# can_grow_patricians_CTD_trigger = yes
							# can_grow_clerics_CTD_trigger = yes
						# }
						# can_grow_scum_CTD_trigger = yes
						# will_shrink_scum_CTD_trigger = yes
					# }
				# }
			# }
		}
	}
}

character_event = {	# Owner is given edict choice (part 2/3)
	id = CTD.0403
	desc =  CTDDESC_0403
	picture = "GFX_evt_council"
	
	is_triggered_only = yes		# by event
	
	option = {
		name = CTDOPTA_0403	# Growth Incentive: Elite
		# Cost depends on existing pop amount (cheaper if low pops):
		if = {
			limit = {
				event_target:target_edict_province = {
					NOT = {
						check_variable = {
							which = province_population_elite
							value = 4
						}
					}
				}
			}
			prestige = -50
		}
		if = {
			limit = {
				event_target:target_edict_province = {
					check_variable = {
						which = province_population_elite
						value = 4
					}
				}
			}
			prestige = -100
		}
		event_target:target_edict_province = {
			add_province_modifier = {	# Modifier hidden to avoid interface cluttering, but visible in major province modifier
				name = elite_growth_incentive
				duration = 1825	# 5 years
				hidden = yes
			}
		}
		ai_chance = {
			factor = 1
			modifier = {	# More likely if can be grown currently
				factor = 3
				event_target:target_edict_province = {
					any_province_holding = {
						can_grow_elite_CTD_trigger = yes
					}
				}
			}
		}
	}
	
	option = {
		name = CTDOPTB_0403	# Growth Incentive: Special
		# Cost depends on existing pop amount (cheaper if low pops):
		if = {
			limit = {
				event_target:target_edict_province = {
					NOT = {
						check_variable = {
							which = province_population_special
							value = 10
						}
					}
				}
			}
			prestige = -50
		}
		if = {
			limit = {
				event_target:target_edict_province = {
					check_variable = {
						which = province_population_special
						value = 10
					}
				}
			}
			prestige = -100
		}
		event_target:target_edict_province = {
			add_province_modifier = {	# Modifier hidden to avoid interface cluttering, but visible in major province modifier
				name = special_growth_incentive
				duration = 1825	# 5 years
				hidden = yes
			}
		}
		ai_chance = {
			factor = 1
			modifier = {	# More likely if can be grown currently
				factor = 3
				event_target:target_edict_province = {
					any_province_holding = {
						OR = {
							can_grow_soldiers_CTD_trigger = yes
							can_grow_patricians_CTD_trigger = yes
							can_grow_clerics_CTD_trigger = yes
						}
					}
				}
			}
		}
	}
	
	option = {
		name = CTDOPTC_0403	# Show next options
		character_event = {
			id = CTD.0404
		}
		ai_chance = {
			factor = 3	# 3-times as likely since three cycling options remain
			modifier = {	# More likely if one of the later options can be grown currently
				factor = 3
				any_province_holding = {
					can_grow_scum_CTD_trigger = yes
				}
			}
			modifier = {	# More likely if one of the later options can be grown currently
				factor = 3
				event_target:target_edict_province = {
					any_province_holding = {
						will_shrink_scum_CTD_trigger = yes
					}
				}
			}
		}
	}
}

character_event = {	# Owner is given edict choice (part 3/3)
	id = CTD.0404
	desc =  CTDDESC_0404
	picture = "GFX_evt_council"
	
	is_triggered_only = yes		# by event
	
	option = {
		name = CTDOPTA_0404	# Growth Incentive: Scum
		# Cost depends on existing pop amount (cheaper if low pops):
		if = {
			limit = {
				event_target:target_edict_province = {
					NOT = {
						check_variable = {
							which = province_population_scum
							value = 10
						}
					}
				}
			}
			piety = -25
		}
		if = {
			limit = {
				event_target:target_edict_province = {
					check_variable = {
						which = province_population_scum
						value = 10
					}
				}
			}
			piety = -50
		}
		event_target:target_edict_province = {
			add_province_modifier = {	# Modifier hidden to avoid interface cluttering, but visible in major province modifier
				name = scum_growth_incentive
				duration = 1825	# 5 years
				hidden = yes
			}
		}
		ai_chance = {
			factor = 1
			modifier = {	# More likely if can be grown currently
				factor = 3
				event_target:target_edict_province = {
					any_province_holding = {
						can_grow_scum_CTD_trigger = yes
					}
				}
			}
		}
	}
	
	option = {
		name = CTDOPTB_0404	# Enforce Law: Scum
		# Cost depends on existing pop amount (*cheaper* if high pops!):
		if = {
			limit = {
				event_target:target_edict_province = {
					NOT = {
						check_variable = {
							which = province_population_scum
							value = 10
						}
					}
				}
			}
			wealth = -12.5
			prestige = -12.5
		}
		if = {
			limit = {
				event_target:target_edict_province = {
					check_variable = {
						which = province_population_scum
						value = 10
					}
				}
			}
			wealth = -25
			prestige = -25
		}
		event_target:target_edict_province = {
			add_province_modifier = {	# Modifier hidden to avoid interface cluttering, but visible in major province modifier
				name = enforced_law_on_scum
				duration = 1825	# 5 years
				hidden = yes
			}
		}
		ai_chance = {
			factor = 1
			modifier = {	# More likely if can be grown currently
				factor = 3
				event_target:target_edict_province = {
					any_province_holding = {
						will_shrink_scum_CTD_trigger = yes
					}
				}
			}
		}
	}
	
	option = {
		name = CTDOPTC_0404	# Do nothing
		# NOTE: Add AI blocking timer maybe?
		ai_chance = {
			factor = 1
			modifier = {	# More likely if NOTHING can be grown currently
				factor = 3
				NOT = {
					event_target:target_edict_province = {
						any_province_holding = {
							OR = {
								can_grow_peasants_CTD_trigger = yes
								can_grow_artisans_CTD_trigger = yes
								can_grow_merchants_CTD_trigger = yes
								can_grow_elite_CTD_trigger = yes
								OR = {
									can_grow_soldiers_CTD_trigger = yes
									can_grow_patricians_CTD_trigger = yes
									can_grow_clerics_CTD_trigger = yes
								}
								can_grow_scum_CTD_trigger = yes
								will_shrink_scum_CTD_trigger = yes
							}
						}
					}
				}
			}
		}
	}
	
	option = {
		name = CTDOPTD_0404	# Show next options
		trigger = {
			ai = no	# AI can not cycle back - but it can chose nothing (option above)
		}
		character_event = {
			id = CTD.0402
		}
	}
}


### Special Features

## Trade Fair

province_event = {	# Province fires invisible event to be in scope, then fires player decision
	id = CTD.0410
	desc =  CTDDESC_0001		# Generic "invisible" localisation
	
	is_triggered_only = yes		# by decision
	
	hide_window = yes
	
	immediate = {
		save_event_target_as = target_trade_fair_province	# save province
		owner = {
			character_event = {	# Give owner actual choice now
				id = CTD.0411
			}
		}
	}
}

character_event = {	# Owner is asked to confirm
	id = CTD.0411
	desc =  CTDDESC_0411
	picture = "GFX_evt_market"
	
	is_triggered_only = yes		# by event
	
	option = {	# Yes
		name = CTDOPTA_0411
		wealth = -100
		prestige = -100
		event_target:target_trade_fair_province = {
			add_province_modifier = {	# Modifier hidden to avoid interface cluttering, but visible in major province modifier
				name = feature_trade_fair
				duration = -1
				hidden = yes
			}
			# Also clear flag:
			clr_province_flag = trade_fair_decision_taken
		}
	}
	
	option = {	# No
		name = CTDOPTB_0411
		event_target:target_trade_fair_province = {
			# Clear flag:
			clr_province_flag = trade_fair_decision_taken
		}
	}
}

## Staple Right

province_event = {	# Province fires invisible event to be in scope, then fires player decision
	id = CTD.0412
	desc =  CTDDESC_0001		# Generic "invisible" localisation
	
	is_triggered_only = yes		# by decision
	
	hide_window = yes
	
	immediate = {
		save_event_target_as = target_staple_right_province	# save province
		owner = {
			character_event = {	# Give owner actual choice now
				id = CTD.0413
			}
		}
	}
}

character_event = {	# Owner is asked to confirm
	id = CTD.0413
	desc =  CTDDESC_0413
	picture = "GFX_evt_market"
	
	is_triggered_only = yes		# by event
	
	option = {	# Yes
		name = CTDOPTA_0413
		wealth = -50
		prestige = -200
		event_target:target_staple_right_province = {
			add_province_modifier = {	# Modifier hidden to avoid interface cluttering, but visible in major province modifier
				name = feature_staple_right
				duration = -1
				hidden = yes
			}
			# Also clear flag:
			clr_province_flag = staple_right_decision_taken
		}
	}
	
	option = {	# No
		name = CTDOPTB_0413
		event_target:target_staple_right_province = {
			# Clear flag:
			clr_province_flag = staple_right_decision_taken
		}
	}
}


### Send Prospectors

## Province decision fires event

province_event = {	# Ping from province, save target
	id = CTD.0420
	
	is_triggered_only = yes		# by decision
	
	hide_window = yes
	
	immediate = {
		# Save event target:
		save_event_target_as = target_prospected_province	# save province
		# Calculate prospection outcome (for now just hidden):
		random_list = {
			10 = {
				modifier = {
					factor = 0
					has_province_modifier = prospected_mineral_gold_ore
				}
				set_province_flag = just_found_gold_ore	# set hidden flag
			}
			10 = {
				modifier = {
					factor = 0
					has_province_modifier = prospected_mineral_placer_gold
				}
				add_province_modifier = {
					name = prospected_mineral_placer_gold
					duration = 1825
				}
				set_province_flag = just_found_placer_gold
			}
			10 = {
				modifier = {
					factor = 0
					has_province_modifier = prospected_mineral_placer_gold
				}
				add_province_modifier = {
					name = prospected_mineral_placer_gold
					duration = 1825
				}
				set_province_flag = just_found_
			}
			10 = {
				modifier = {
					factor = 0
					has_province_modifier = prospected_mineral_placer_gold
				}
				add_province_modifier = {
					name = prospected_mineral_placer_gold
					duration = 1825
				}
				set_province_flag = just_found_
			}
		}
		# Only if still not at maximum, 2nd chance
		if = {
			limit = {
				NOT = {
					has_max_prospected_minerals_CTD_trigger = yes
				}
			}
			
		}
		# Only if still not at maximum, 3rd chance
		if = {
			limit = {
				NOT = {
					has_max_prospected_minerals_CTD_trigger = yes
				}
			}
			
		}
		# Ping to owner:
		character_event = {	# Owner presented with results
			id = CTD.0502
			days = 14	# takes at least a fortnight
			random = 14
		}
	}
}

character_event = {	# Owner gets shown results (after they are calculated)
	id = CTD.0421
	desc =  CTDDESC_0421
	picture = "GFX_evt_medieval_map"
	
	is_triggered_only = yes		# by decision
	
	# Onwer accepts results
	option = {
		name = CTDOPTA_0421
		event_target:target_spawn_province = {
			trigger_switch = {	# Decides which modifier to apply based on flag set before
				on_trigger = has_province_flag
				just_found_gold_ore = {
					add_province_modifier = {
						name = prospected_mineral_gold_ore
						duration = 1825	# stays for 5 years (afterwards location is assumed forgotten)
					}
				}
			}
		}
	}
	
	# Angry responses: give back a bit of gold or prestige, removes prospected results but also disables decision on any province for a while
	# Wroth, scare away
	option = {
		name = CTDOPTB_0421
		trigger = {
			AND = {
				trait = wroth
				NOT = {
					# Never possible with content trait
					trait = content
				}
			}
		}
		tooltip_info = wroth
		# Gives back half of gold & a bit prestige
		wealth = 25
		prestige = 10
		event_target:target_spawn_province = {
			# clear any newly prospected flags
			clr_province_flag = just_found_gold_ore
			clr_province_flag = 
		}
		add_character_modifier = {
			name = scared_off_prospectors
			duration = 730	# decision disabled for 2 years, anywhere in demesne
		}
	}
	# Stubborn, ignore unwanted results
	option = {
		name = CTDOPTC_0421
		trigger = {
			AND = {
				NOR = {
					trait = wroth
					# Never possible with content trait
					trait = content
				}
				trait = stubborn
			}
		}
		tooltip_info = stubborn
		# Gives back a bit of gold
		wealth = 10
		event_target:target_spawn_province = {
			# clear any newly prospected flags
			clr_province_flag = just_found_gold_ore
			clr_province_flag = 
		}
		add_character_modifier = {
			name = scared_off_prospectors
			duration = 365	# decision disabled for 1 year, anywhere in demesne
		}
	}
	# Greedy, wanted gold or other precious things
	option = {
		name = CTDOPTD_0421
		trigger = {
			AND = {
				NOR = {
					trait = wroth
					trait = stubborn
					# Never possible with content trait
					trait = content
				}
				trait = greedy
				event_target:target_spawn_province = {	# province must not have any preciosu things prospected
					NOR = {
						has_province_flag = just_found_gold_ore
						has_province_flag = just_found_placer_gold
						has_province_flag = just_found_electrum
						has_province_flag = just_found_chlorargyrite
						has_province_flag = just_found_ruby_silver
						has_province_flag = just_found_lead_glance
						has_province_flag = just_found_gemstones
						has_province_flag = just_found_lapis_lazuli
						has_province_flag = just_found_malachite
						has_province_flag = just_found_orpiment_realgar
						has_province_flag = just_found_jade
						has_province_flag = just_found_marble
						has_province_flag = just_found_alabaster
						has_province_flag = just_found_amber
					}
				}
			}
		}
		tooltip_info = greedy
		# Gives back half of gold
		wealth = 25
		event_target:target_spawn_province = {
			# clear any newly prospected flags
			clr_province_flag = just_found_gold_ore
			clr_province_flag = 
		}
		add_character_modifier = {
			name = scared_off_prospectors
			duration = 365	# decision disabled for 1 year, anywhere in demesne
		}
	}
	# Arbitrary, simply wanted different results & seizes back money
	option = {
		name = CTDOPTE_0421
		trigger = {
			AND = {
				NOR = {
					trait = wroth
					trait = stubborn
					trait = greedy
					# Never possible with content trait
					trait = content
				}
				trait = arbitrary
			}
		}
		tooltip_info = arbitrary
		# Gives back most of gold at prestige hit
		wealth = 40
		scaled_prestige = {	# 5% of annual prestige gain
			value = -0.05
			min = -100	# NOTE: Am I guessing correctly that the logic is inverted for prestige removal?
			max = -10
		}
		event_target:target_spawn_province = {
			# clear any newly prospected flags
			clr_province_flag = just_found_gold_ore
			clr_province_flag = 
		}
		add_character_modifier = {
			name = scared_off_prospectors
			duration = 365	# decision disabled for 2 years, anywhere in demesne
		}
	}
	# Slightly better variants: politely tell the prospectors the results are bad
	# Midas Touched, can actually convince the prospectors they preformed poorly and it was their fault
	option = {
		name = CTDOPTF_0421
		trigger = {
			AND = {
				NOT = {
					# Never possible with content trait
					trait = content
				}
				trait = midas_touched
			}
		}
		tooltip_info = midas_touched
		# Gives back most of gold and also some prestige
		wealth = 40
		prestige = 20
		event_target:target_spawn_province = {
			# clear any newly prospected flags
			clr_province_flag = just_found_gold_ore
			clr_province_flag = 
		}
		# This option is the only one that does not disable new prospection!!
	}
	# Fortune Builder, convinces the prospectors they preformed poorly and they don't get angry
	option = {
		name = CTDOPTG_0421
		trigger = {
			AND = {
				NOR = {
					trait = midas_touched
					# Never possible with content trait
					trait = content
				}
				trait = fortune_builder
			}
		}
		tooltip_info = fortune_builder
		# Gives back half of gold & a bit prestige
		wealth = 25
		prestige = 10
		event_target:target_spawn_province = {
			# clear any newly prospected flags
			clr_province_flag = just_found_gold_ore
			clr_province_flag = 
			# Also block new prospections, but only for this province:
			add_province_modifier = {
				name = unwanted_prospecting_results
				duration = 365	# 1 year
			}
		}
	}
	# Grey Eminence, convinces the prospectors they preformed poorly and they don't get angry
	option = {
		name = CTDOPTH_0421
		trigger = {
			AND = {
				NOR = {
					trait = midas_touched
					trait = fortune_builder
					# Never possible with content trait
					trait = content
				}
				trait = grey_eminence
			}
		}
		tooltip_info = grey_eminence
		# Gives back half of gold & a bit prestige
		wealth = 25
		prestige = 10
		event_target:target_spawn_province = {
			# clear any newly prospected flags
			clr_province_flag = just_found_gold_ore
			clr_province_flag = 
			# Also block new prospections, but only for this province:
			add_province_modifier = {
				name = unwanted_prospecting_results
				duration = 365	# 1 year
			}
		}
	}
	# Administrator, explains that results do not fit his plans but prospectors care little
	option = {
		name = CTDOPTI_0421
		trigger = {
			AND = {
				NOR = {
					trait = midas_touched
					trait = fortune_builder
					trait = grey_eminence
					# Never possible with content trait
					trait = content
				}
				trait = administrator
			}
		}
		tooltip_info = administrator
		# Gives back a bit of gold
		wealth = 10
		event_target:target_spawn_province = {
			# clear any newly prospected flags
			clr_province_flag = just_found_gold_ore
			clr_province_flag = 
			# Also block new prospections, but only for this province:
			add_province_modifier = {
				name = unwanted_prospecting_results
				duration = 365	# 1 year
			}
		}
	}
	
	# Crazy option, because lunatics don't care if anything they do makes any sense
	option = {
		name = CTDOPTJ_0421
		trigger = {
			trait = lunatic
		}
		tooltip_info = lunatic
		# Gives back all the gold at big prestige hit
		wealth = 50
		scaled_prestige = {	# 20% of annual prestige gain
			value = -0.20
			min = -500	# NOTE: Am I guessing correctly that the logic is inverted for prestige removal?
			max = -50
		}
		event_target:target_spawn_province = {
			# clear any newly prospected flags
			clr_province_flag = just_found_gold_ore
			clr_province_flag = 
		}
		add_character_modifier = {
			name = scared_off_prospectors
			duration = 1825	# decision disabled for 5 years, anywhere in demesne
		}
	}
	
	# Afterwards (any option chosen): Clean up the standard decision blocking flag
	after = {
		event_target:target_spawn_province = {
			clr_province_flag = prospectors_sent
		}
	}
}

character_event = {	# Now decide which Subcategory (Population)
	id = CTD.0422
	desc =  CTDDESC_0422
	picture = "GFX_evt_medieval_map"
	
	is_triggered_only = yes		# by decision
	
	option = {	# 
		name = CTDOPTA_0422
		character_event = {
			id = CTD.0426
		}
	}
	
	option = {	# 
		name = CTDOPTB_0422
		character_event = {
			id = CTD.0427
		}
	}
	
	option = {	# 
		name = CTDOPTC_0422
		character_event = {
			id = CTD.0428
		}
	}
	
	option = {	# 
		name = CTDOPTD_0422
		character_event = {
			id = CTD.0429
		}
	}
}


# ### Start slave trade

# ## Initial event to save all scopes as targets

# character_event = {	# Important to cache the scopes immediately, can't be done later!
	# id = CTD.0430
	# desc =  CTDDESC_0001		# Generic "invisible" localisation
	
	# is_triggered_only = yes		# by decision
	
	# hide_window = yes
	
	# immediate = {
		# # The great cacheing:
		# ROOT = {
			# save_event_target_as = target_slaver	# decison taker is enslaving
			# location = {	# IMPORTANT: Character must not have moved - safety check neccessary? Not sure, because the event happens immediately, but maybe...
				# save_event_target_as = target_enslaved_province	# province is enslaved
			# }
			# # Follow-up event reports back to decision taker and presents choices:
			# character_event = {
				# id = CTD.0431
			# }
		# }
	# }
# }

# character_event = {	# Chose an "origin" province for the new slaves
	# id = CTD.0431
	# desc =  CTDDESC_0431
	
	# is_triggered_only = yes		# by event
	
	# immediate = {
		# # Set temporary flags to differencate the potential origin provinces
		# event_target:target_enslaved_province = {
			# ROOT = {
				# # Flag 1:
				# random_demesne_province = {	# Must be within range of a "trade origin" designated province
					# limit = {
						# slave_origin_province_is_in_range_CTD_trigger = yes
					# }
					# # Set the temp flag:
					# set_province_flag = possible_new_slave_origin_province_1
				# }
				# # Flag 2 (check if possible now beforehand):
				# if = {
					# limit = {
						# any_demesne_province = {
							# AND = {
								# slave_origin_province_is_in_range_CTD_trigger = yes
								# NOT = {
									# has_province_flag = possible_new_slave_origin_province_1
								# }
							# }
						# }
					# }
					# random_demesne_province = {	# Must be within range of a "trade origin" designated province
						# limit = {
							# AND = {
								# slave_origin_province_is_in_range_CTD_trigger = yes
								# NOT = {
									# has_province_flag = possible_new_slave_origin_province_1
								# }
							# }
						# }
						# # Set the temp flag:
						# set_province_flag = possible_new_slave_origin_province_2
					# }
				# }
				# # Flag 3 (also check):
				# if = {
					# limit = {
						# any_demesne_province = {
							# AND = {
								# slave_origin_province_is_in_range_CTD_trigger = yes
								# NOR = {
									# has_province_flag = possible_new_slave_origin_province_1
									# has_province_flag = possible_new_slave_origin_province_2
								# }
							# }
						# }
					# }
					# random_demesne_province = {	# Must be within range of a "trade origin" designated province
						# limit = {
							# AND = {
								# slave_origin_province_is_in_range_CTD_trigger = yes
								# NOR = {
									# has_province_flag = possible_new_slave_origin_province_1
									# has_province_flag = possible_new_slave_origin_province_2
								# }
							# }
						# }
						# # Set the temp flag:
						# set_province_flag = possible_new_slave_origin_province_3
					# }
				# }
			# }
		# }
	# }
	
	# option = {	# First possible origin province
		# name = CTDOPTA_0431
		# trigger = {
			# any_demesne_province = {
				# has_province_flag = possible_new_slave_origin_province_1
			# }
		# }
		# # Set modifier & "abduct" (or import) slaves:
		# random_demesne_province = {
			# limit = {
				# has_province_flag = possible_new_slave_origin_province_1
			# }
			# remove_province_modifier = potential_slave_origin_province
			# add_province_modifier = {
				# name = slave_origin_province
				# days = -1
			# }
			# event_target:target_enslaved_province = {
				# abduct_enslaved_population_to_slavery_origin_province_CTD_effect = yes
			# }
		# }
		# # Clear the temp flags:
		# any_demesne_province = {
			# limit = {
				# OR = {
					# has_province_flag = possible_new_slave_origin_province_1
					# has_province_flag = possible_new_slave_origin_province_2
					# has_province_flag = possible_new_slave_origin_province_3
				# }
			# }
			# clr_province_flag = possible_new_slave_origin_province_1
			# clr_province_flag = possible_new_slave_origin_province_2
			# clr_province_flag = possible_new_slave_origin_province_3
		# }
		# # Important: Also remember the decision flag!
		# clr_character_flag = started_slave_hunt
	# }
	
	# option = {	# Second possible origin province
		# name = CTDOPTB_0431
		# trigger = {
			# any_demesne_province = {
				# has_province_flag = possible_new_slave_origin_province_2
			# }
		# }
		# # Set modifier & "abduct" (or import) slaves:
		# random_demesne_province = {
			# limit = {
				# has_province_flag = possible_new_slave_origin_province_2
			# }
			# remove_province_modifier = potential_slave_origin_province
			# add_province_modifier = {
				# name = slave_origin_province
				# days = -1
			# }
			# event_target:target_enslaved_province = {
				# abduct_enslaved_population_to_slavery_origin_province_CTD_effect = yes
			# }
		# }
		# # Clear the temp flags:
		# any_demesne_province = {
			# limit = {
				# OR = {
					# has_province_flag = possible_new_slave_origin_province_1
					# has_province_flag = possible_new_slave_origin_province_2
					# has_province_flag = possible_new_slave_origin_province_3
				# }
			# }
			# clr_province_flag = possible_new_slave_origin_province_1
			# clr_province_flag = possible_new_slave_origin_province_2
			# clr_province_flag = possible_new_slave_origin_province_3
		# }
		# # Important: Also remember the decision flag!
		# clr_character_flag = started_slave_hunt
	# }
	
	# option = {	# Third possible origin province
		# name = CTDOPTC_0431
		# trigger = {
			# any_demesne_province = {
				# has_province_flag = possible_new_slave_origin_province_3
			# }
		# }
		# # Set modifier & "abduct" (or import) slaves:
		# random_demesne_province = {
			# limit = {
				# has_province_flag = possible_new_slave_origin_province_3
			# }
			# remove_province_modifier = potential_slave_origin_province
			# add_province_modifier = {
				# name = slave_origin_province
				# days = -1
			# }
			# event_target:target_enslaved_province = {
				# abduct_enslaved_population_to_slavery_origin_province_CTD_effect = yes
			# }
		# }
		# # Clear the temp flags:
		# any_demesne_province = {
			# limit = {
				# OR = {
					# has_province_flag = possible_new_slave_origin_province_1
					# has_province_flag = possible_new_slave_origin_province_2
					# has_province_flag = possible_new_slave_origin_province_3
				# }
			# }
			# clr_province_flag = possible_new_slave_origin_province_1
			# clr_province_flag = possible_new_slave_origin_province_2
			# clr_province_flag = possible_new_slave_origin_province_3
		# }
		# # Important: Also remember the decision flag!
		# clr_character_flag = started_slave_hunt
	# }
# }
