##############################
# CTD general scripted effects
#
# by LordPeter
##############################

### Change workforce amount
## This MUST be called in an province scope to work properly
# Increases or decreases the province's workforce type value based on several factors	# NOTE: always = no # TESTING	#TECH_TRADE_PRACTICES is just a placeholder for future, changed techs

# Simple Labour
add_half_amount_of_simple_labour_CTD_effect = {
	# Value is decreased by 30%:
	if = {
		limit = {
			OR = {
				always = no	# currently not possible, but later might be e.g. due to famine or disease
			}
		}
		change_variable = {
			which = province_workforce_simple_labour
			value = 0.35
		}
	}
	# Value is decreased by 20%:
	if = {
		limit = {
			OR = {
				always = no	# currently not possible, but later might be e.g. due to famine or disease
			}
		}
		change_variable = {
			which = province_workforce_simple_labour
			value = 0.4
		}
	}
	# Value is decreased by 10%:
	if = {
		limit = {
			OR = {
				always = no	# currently not possible, but later might be e.g. due to famine or disease
			}
		}
		change_variable = {
			which = province_workforce_simple_labour
			value = 0.45
		}
	}
	# Value is unmodified:
	if = {
		limit = {
			OR = {
				TECH_TRADE_PRACTICES = 0
			}
		}
		change_variable = {
			which = province_workforce_simple_labour
			value = 0.5
		}
	}
	# Value is increased by 10%:
	if = {
		limit = {
			OR = {
				always = no # TESTING	#always = no # TESTING	#TECH_TRADE_PRACTICES = 2
			}
		}
		change_variable = {
			which = province_workforce_simple_labour
			value = 0.55
		}
	}
	# Value is increased by 20%:
	if = {
		limit = {
			OR = {
				always = no # TESTING	always = no # TESTING	#TECH_TRADE_PRACTICES = 4
			}
		}
		change_variable = {
			which = province_workforce_simple_labour
			value = 0.6
		}
	}
	# Value is increased by 30%:
	if = {
		limit = {
			OR = {
				always = no # TESTING	always = no # TESTING	#TECH_TRADE_PRACTICES = 6
			}
		}
		change_variable = {
			which = province_workforce_simple_labour
			value = 0.65
		}
	}
}
remove_half_amount_of_simple_labour_CTD_effect = {
	# Value is decreased by 30%:
	if = {
		limit = {
			OR = {
				always = no	# currently not possible, but later might be e.g. due to famine or disease
			}
		}
		change_variable = {
			which = province_workforce_simple_labour
			value = -0.35
		}
	}
	# Value is decreased by 20%:
	if = {
		limit = {
			OR = {
				always = no	# currently not possible, but later might be e.g. due to famine or disease
			}
		}
		change_variable = {
			which = province_workforce_simple_labour
			value = -0.4
		}
	}
	# Value is decreased by 10%:
	if = {
		limit = {
			OR = {
				always = no	# currently not possible, but later might be e.g. due to famine or disease
			}
		}
		change_variable = {
			which = province_workforce_simple_labour
			value = -0.45
		}
	}
	# Value is unmodified:
	if = {
		limit = {
			OR = {
				TECH_TRADE_PRACTICES = 0
			}
		}
		change_variable = {
			which = province_workforce_simple_labour
			value = -0.5
		}
	}
	# Value is increased by 10%:
	if = {
		limit = {
			OR = {
				always = no # TESTING	#TECH_TRADE_PRACTICES = 2
			}
		}
		change_variable = {
			which = province_workforce_simple_labour
			value = -0.55
		}
	}
	# Value is increased by 20%:
	if = {
		limit = {
			OR = {
				always = no # TESTING	#TECH_TRADE_PRACTICES = 4
			}
		}
		change_variable = {
			which = province_workforce_simple_labour
			value = -0.6
		}
	}
	# Value is increased by 30%:
	if = {
		limit = {
			OR = {
				always = no # TESTING	#TECH_TRADE_PRACTICES = 6
			}
		}
		change_variable = {
			which = province_workforce_simple_labour
			value = -0.65
		}
	}
}
add_one_amount_of_simple_labour_CTD_effect = {
	# Value is decreased by 30%:
	if = {
		limit = {
			OR = {
				always = no	# currently not possible, but later might be e.g. due to famine or disease
			}
		}
		change_variable = {
			which = province_workforce_simple_labour
			value = 0.7
		}
	}
	# Value is decreased by 20%:
	if = {
		limit = {
			OR = {
				always = no	# currently not possible, but later might be e.g. due to famine or disease
			}
		}
		change_variable = {
			which = province_workforce_simple_labour
			value = 0.8
		}
	}
	# Value is decreased by 10%:
	if = {
		limit = {
			OR = {
				always = no	# currently not possible, but later might be e.g. due to famine or disease
			}
		}
		change_variable = {
			which = province_workforce_simple_labour
			value = 0.9
		}
	}
	# Value is unmodified:
	if = {
		limit = {
			OR = {
				TECH_TRADE_PRACTICES = 0
			}
		}
		change_variable = {
			which = province_workforce_simple_labour
			value = 1
		}
	}
	# Value is increased by 10%:
	if = {
		limit = {
			OR = {
				always = no # TESTING	#TECH_TRADE_PRACTICES = 2
			}
		}
		change_variable = {
			which = province_workforce_simple_labour
			value = 1.1
		}
	}
	# Value is increased by 20%:
	if = {
		limit = {
			OR = {
				always = no # TESTING	#TECH_TRADE_PRACTICES = 4
			}
		}
		change_variable = {
			which = province_workforce_simple_labour
			value = 1.2
		}
	}
	# Value is increased by 30%:
	if = {
		limit = {
			OR = {
				always = no # TESTING	#TECH_TRADE_PRACTICES = 6
			}
		}
		change_variable = {
			which = province_workforce_simple_labour
			value = 1.3
		}
	}
}
remove_one_amount_of_simple_labour_CTD_effect = {
	# Value is decreased by 30%:
	if = {
		limit = {
			OR = {
				always = no	# currently not possible, but later might be e.g. due to famine or disease
			}
		}
		change_variable = {
			which = province_workforce_simple_labour
			value = -0.7
		}
	}
	# Value is decreased by 20%:
	if = {
		limit = {
			OR = {
				always = no	# currently not possible, but later might be e.g. due to famine or disease
			}
		}
		change_variable = {
			which = province_workforce_simple_labour
			value = -0.8
		}
	}
	# Value is decreased by 10%:
	if = {
		limit = {
			OR = {
				always = no	# currently not possible, but later might be e.g. due to famine or disease
			}
		}
		change_variable = {
			which = province_workforce_simple_labour
			value = -0.9
		}
	}
	# Value is unmodified:
	if = {
		limit = {
			OR = {
				TECH_TRADE_PRACTICES = 0
			}
		}
		change_variable = {
			which = province_workforce_simple_labour
			value = -1
		}
	}
	# Value is increased by 10%:
	if = {
		limit = {
			OR = {
				always = no # TESTING	#TECH_TRADE_PRACTICES = 2
			}
		}
		change_variable = {
			which = province_workforce_simple_labour
			value = -1.1
		}
	}
	# Value is increased by 20%:
	if = {
		limit = {
			OR = {
				always = no # TESTING	#TECH_TRADE_PRACTICES = 4
			}
		}
		change_variable = {
			which = province_workforce_simple_labour
			value = -1.2
		}
	}
	# Value is increased by 30%:
	if = {
		limit = {
			OR = {
				always = no # TESTING	#TECH_TRADE_PRACTICES = 6
			}
		}
		change_variable = {
			which = province_workforce_simple_labour
			value = -1.3
		}
	}
}

# Craftsmanship
add_half_amount_of_craftsmanship_CTD_effect = {
	# Value is decreased by 30%:
	if = {
		limit = {
			OR = {
				always = no	# currently not possible, but later might be e.g. due to famine or disease
			}
		}
		change_variable = {
			which = province_workforce_craftsmanship
			value = 0.35
		}
	}
	# Value is decreased by 20%:
	if = {
		limit = {
			OR = {
				always = no	# currently not possible, but later might be e.g. due to famine or disease
			}
		}
		change_variable = {
			which = province_workforce_craftsmanship
			value = 0.4
		}
	}
	# Value is decreased by 10%:
	if = {
		limit = {
			OR = {
				always = no	# currently not possible, but later might be e.g. due to famine or disease
			}
		}
		change_variable = {
			which = province_workforce_craftsmanship
			value = 0.45
		}
	}
	# Value is unmodified:
	if = {
		limit = {
			OR = {
				TECH_TRADE_PRACTICES = 0
			}
		}
		change_variable = {
			which = province_workforce_craftsmanship
			value = 0.5
		}
	}
	# Value is increased by 10%:
	if = {
		limit = {
			OR = {
				always = no # TESTING	#TECH_TRADE_PRACTICES = 2
			}
		}
		change_variable = {
			which = province_workforce_craftsmanship
			value = 0.55
		}
	}
	# Value is increased by 20%:
	if = {
		limit = {
			OR = {
				always = no # TESTING	#TECH_TRADE_PRACTICES = 4
			}
		}
		change_variable = {
			which = province_workforce_craftsmanship
			value = 0.6
		}
	}
	# Value is increased by 30%:
	if = {
		limit = {
			OR = {
				always = no # TESTING	#TECH_TRADE_PRACTICES = 6
			}
		}
		change_variable = {
			which = province_workforce_craftsmanship
			value = 0.65
		}
	}
}
remove_half_amount_of_craftsmanship_CTD_effect = {
	# Value is decreased by 30%:
	if = {
		limit = {
			OR = {
				always = no	# currently not possible, but later might be e.g. due to famine or disease
			}
		}
		change_variable = {
			which = province_workforce_craftsmanship
			value = -0.35
		}
	}
	# Value is decreased by 20%:
	if = {
		limit = {
			OR = {
				always = no	# currently not possible, but later might be e.g. due to famine or disease
			}
		}
		change_variable = {
			which = province_workforce_craftsmanship
			value = -0.4
		}
	}
	# Value is decreased by 10%:
	if = {
		limit = {
			OR = {
				always = no	# currently not possible, but later might be e.g. due to famine or disease
			}
		}
		change_variable = {
			which = province_workforce_craftsmanship
			value = -0.45
		}
	}
	# Value is unmodified:
	if = {
		limit = {
			OR = {
				TECH_TRADE_PRACTICES = 0
			}
		}
		change_variable = {
			which = province_workforce_craftsmanship
			value = -0.5
		}
	}
	# Value is increased by 10%:
	if = {
		limit = {
			OR = {
				always = no # TESTING	#TECH_TRADE_PRACTICES = 2
			}
		}
		change_variable = {
			which = province_workforce_craftsmanship
			value = -0.55
		}
	}
	# Value is increased by 20%:
	if = {
		limit = {
			OR = {
				always = no # TESTING	#TECH_TRADE_PRACTICES = 4
			}
		}
		change_variable = {
			which = province_workforce_craftsmanship
			value = -0.6
		}
	}
	# Value is increased by 30%:
	if = {
		limit = {
			OR = {
				always = no # TESTING	#TECH_TRADE_PRACTICES = 6
			}
		}
		change_variable = {
			which = province_workforce_craftsmanship
			value = -0.65
		}
	}
}
add_one_amount_of_craftsmanship_CTD_effect = {
	# Value is decreased by 30%:
	if = {
		limit = {
			OR = {
				always = no	# currently not possible, but later might be e.g. due to famine or disease
			}
		}
		change_variable = {
			which = province_workforce_craftsmanship
			value = 0.7
		}
	}
	# Value is decreased by 20%:
	if = {
		limit = {
			OR = {
				always = no	# currently not possible, but later might be e.g. due to famine or disease
			}
		}
		change_variable = {
			which = province_workforce_craftsmanship
			value = 0.8
		}
	}
	# Value is decreased by 10%:
	if = {
		limit = {
			OR = {
				always = no	# currently not possible, but later might be e.g. due to famine or disease
			}
		}
		change_variable = {
			which = province_workforce_craftsmanship
			value = 0.9
		}
	}
	# Value is unmodified:
	if = {
		limit = {
			OR = {
				TECH_TRADE_PRACTICES = 0
			}
		}
		change_variable = {
			which = province_workforce_craftsmanship
			value = 1
		}
	}
	# Value is increased by 10%:
	if = {
		limit = {
			OR = {
				always = no # TESTING	#TECH_TRADE_PRACTICES = 2
			}
		}
		change_variable = {
			which = province_workforce_craftsmanship
			value = 1.1
		}
	}
	# Value is increased by 20%:
	if = {
		limit = {
			OR = {
				always = no # TESTING	#TECH_TRADE_PRACTICES = 4
			}
		}
		change_variable = {
			which = province_workforce_craftsmanship
			value = 1.2
		}
	}
	# Value is increased by 30%:
	if = {
		limit = {
			OR = {
				always = no # TESTING	#TECH_TRADE_PRACTICES = 6
			}
		}
		change_variable = {
			which = province_workforce_craftsmanship
			value = 1.3
		}
	}
}
remove_one_amount_of_craftsmanship_CTD_effect = {
	# Value is decreased by 30%:
	if = {
		limit = {
			OR = {
				always = no	# currently not possible, but later might be e.g. due to famine or disease
			}
		}
		change_variable = {
			which = province_workforce_craftsmanship
			value = -0.7
		}
	}
	# Value is decreased by 20%:
	if = {
		limit = {
			OR = {
				always = no	# currently not possible, but later might be e.g. due to famine or disease
			}
		}
		change_variable = {
			which = province_workforce_craftsmanship
			value = -0.8
		}
	}
	# Value is decreased by 10%:
	if = {
		limit = {
			OR = {
				always = no	# currently not possible, but later might be e.g. due to famine or disease
			}
		}
		change_variable = {
			which = province_workforce_craftsmanship
			value = -0.9
		}
	}
	# Value is unmodified:
	if = {
		limit = {
			OR = {
				TECH_TRADE_PRACTICES = 0
			}
		}
		change_variable = {
			which = province_workforce_craftsmanship
			value = -1
		}
	}
	# Value is increased by 10%:
	if = {
		limit = {
			OR = {
				always = no # TESTING	#TECH_TRADE_PRACTICES = 2
			}
		}
		change_variable = {
			which = province_workforce_craftsmanship
			value = -1.1
		}
	}
	# Value is increased by 20%:
	if = {
		limit = {
			OR = {
				always = no # TESTING	#TECH_TRADE_PRACTICES = 4
			}
		}
		change_variable = {
			which = province_workforce_craftsmanship
			value = -1.2
		}
	}
	# Value is increased by 30%:
	if = {
		limit = {
			OR = {
				always = no # TESTING	#TECH_TRADE_PRACTICES = 6
			}
		}
		change_variable = {
			which = province_workforce_craftsmanship
			value = -1.3
		}
	}
}


### Famine Tracking
## This MUST be called in an province scope to work properly
# This tracks food shortages, and should be called from quarterly automation since it will set "famine" status in a province after 1.5 years of continuos food shortage - also fires player info event

# Track famine potential
famine_tracking_CTD_effect = {
	# Increase:
	# NOTE: Inverted order is -yet again- crucial! (But not for "decrease" below - there it is right already)
	if = {
		limit = {
			AND = {
				has_province_flag = food_supply_poor
				has_province_flag = potential_famine_timer_5
				NOT = {
					has_province_flag = potential_famine_timer_6
				}
			}
		}
		clr_province_flag = potential_famine_timer_5
		set_province_flag = potential_famine_timer_6
	}
	if = {
		limit = {
			AND = {
				has_province_flag = food_supply_poor
				has_province_flag = potential_famine_timer_4
				NOR = {
					has_province_flag = potential_famine_timer_5
					has_province_flag = potential_famine_timer_6
				}
			}
		}
		clr_province_flag = potential_famine_timer_4
		set_province_flag = potential_famine_timer_5
	}
	if = {
		limit = {
			AND = {
				has_province_flag = food_supply_poor
				has_province_flag = potential_famine_timer_3
				NOR = {
					has_province_flag = potential_famine_timer_4
					has_province_flag = potential_famine_timer_5
					has_province_flag = potential_famine_timer_6
				}
			}
		}
		clr_province_flag = potential_famine_timer_3
		set_province_flag = potential_famine_timer_4
	}
	if = {
		limit = {
			AND = {
				has_province_flag = food_supply_poor
				has_province_flag = potential_famine_timer_2
				NOR = {
					has_province_flag = potential_famine_timer_3
					has_province_flag = potential_famine_timer_4
					has_province_flag = potential_famine_timer_5
					has_province_flag = potential_famine_timer_6
				}
			}
		}
		clr_province_flag = potential_famine_timer_2
		set_province_flag = potential_famine_timer_3
	}
	if = {
		limit = {
			AND = {
				has_province_flag = food_supply_poor
				has_province_flag = potential_famine_timer_1
				NOR = {
					has_province_flag = potential_famine_timer_2
					has_province_flag = potential_famine_timer_3
					has_province_flag = potential_famine_timer_4
					has_province_flag = potential_famine_timer_5
					has_province_flag = potential_famine_timer_6
				}
			}
		}
		clr_province_flag = potential_famine_timer_1
		set_province_flag = potential_famine_timer_2
	}
	if = {
		limit = {
			AND = {
				has_province_flag = food_supply_poor
				NOR = {
					has_province_flag = potential_famine_timer_1
					has_province_flag = potential_famine_timer_2
					has_province_flag = potential_famine_timer_3
					has_province_flag = potential_famine_timer_4
					has_province_flag = potential_famine_timer_5
					has_province_flag = potential_famine_timer_6
				}
			}
		}
		set_province_flag = potential_famine_timer_1
	}
	# Decrease:
	# by 2 steps when mediocre supply
	if = {
		limit = {
			AND = {
				has_province_flag = food_supply_mediocre
				has_province_flag = potential_famine_timer_1
			}
		}
		clr_province_flag = potential_famine_timer_1
	}
	if = {
		limit = {
			AND = {
				has_province_flag = food_supply_mediocre
				has_province_flag = potential_famine_timer_2
			}
		}
		clr_province_flag = potential_famine_timer_2
	}
	if = {
		limit = {
			AND = {
				has_province_flag = food_supply_mediocre
				has_province_flag = potential_famine_timer_3
			}
		}
		clr_province_flag = potential_famine_timer_3
		set_province_flag = potential_famine_timer_1
	}
	if = {
		limit = {
			AND = {
				has_province_flag = food_supply_mediocre
				has_province_flag = potential_famine_timer_4
			}
		}
		clr_province_flag = potential_famine_timer_4
		set_province_flag = potential_famine_timer_2
	}
	if = {
		limit = {
			AND = {
				has_province_flag = food_supply_mediocre
				has_province_flag = potential_famine_timer_5
			}
		}
		clr_province_flag = potential_famine_timer_5
		set_province_flag = potential_famine_timer_3
	}
	if = {
		limit = {
			AND = {
				has_province_flag = food_supply_mediocre
				has_province_flag = potential_famine_timer_6
			}
		}
		clr_province_flag = potential_famine_timer_6
		set_province_flag = potential_famine_timer_4
	}
	# by 3 steps when good supply
	if = {
		limit = {
			AND = {
				has_province_flag = food_supply_good
				has_province_flag = potential_famine_timer_1
			}
		}
		clr_province_flag = potential_famine_timer_1
	}
	if = {
		limit = {
			AND = {
				has_province_flag = food_supply_good
				has_province_flag = potential_famine_timer_2
			}
		}
		clr_province_flag = potential_famine_timer_2
	}
	if = {
		limit = {
			AND = {
				has_province_flag = food_supply_good
				has_province_flag = potential_famine_timer_3
			}
		}
		clr_province_flag = potential_famine_timer_3
	}
	if = {
		limit = {
			AND = {
				has_province_flag = food_supply_good
				has_province_flag = potential_famine_timer_4
			}
		}
		clr_province_flag = potential_famine_timer_4
		set_province_flag = potential_famine_timer_1
	}
	if = {
		limit = {
			AND = {
				has_province_flag = food_supply_good
				has_province_flag = potential_famine_timer_5
			}
		}
		clr_province_flag = potential_famine_timer_5
		set_province_flag = potential_famine_timer_2
	}
	if = {
		limit = {
			AND = {
				has_province_flag = food_supply_good
				has_province_flag = potential_famine_timer_6
			}
		}
		clr_province_flag = potential_famine_timer_6
		set_province_flag = potential_famine_timer_3
	}
	
	
	# DECLARE FAMINE:
	if = {
		limit = {
			AND = {
				has_province_flag = potential_famine_timer_6
				has_province_flag = food_supply_poor
				NOT = {	# Doesn't already have famine
					has_province_modifier = province_economy_major_modifier_famine
				}
			}
		}
		# Remove normal and set famine major modifier
		remove_province_modifier = province_economy_major_modifier
		add_province_modifier = {
			name = province_economy_major_modifier_famine
			duration = -1
		}
		# Also add province embelishment (bad) for fluff:
		add_province_modifier = {
			name = depopulated_2
			duration = -1
			hidden = yes
		}
		# Inform player owner with event
		if = {
			limit = {
				owner = {	# owner is a player
					ai = no
				}
			}
			save_event_target_as = target_famine_province
			owner = {
				character_event = {
					id = CTD.0301
				}
			}
		}
	}
	
	# FAMINE OVER:
	if = {
		limit = {
			AND = {
				has_province_modifier = province_economy_major_modifier_famine	# Still has a famine
				NOR = {	# But has no longer any famine flag
					has_province_flag = potential_famine_timer_1
					has_province_flag = potential_famine_timer_2
					has_province_flag = potential_famine_timer_3
					has_province_flag = potential_famine_timer_4
					has_province_flag = potential_famine_timer_5
					has_province_flag = potential_famine_timer_6
				}
			}
		}
		# Remove famine and set normal major modifier
		remove_province_modifier = province_economy_major_modifier_famine
		add_province_modifier = {
			name = province_economy_major_modifier
			duration = -1
		}
		# Also remove province embelishment:
		remove_province_modifier = depopulated_2
		# Inform player owner with event
		if = {
			limit = {
				owner = {	# owner is a player
					ai = no
				}
			}
			save_event_target_as = target_famine_province
			owner = {
				character_event = {
					id = CTD.0302
				}
			}
		}
	}
}


### "Abduct" Enslaved Population
## This MUST be called in an province within (!) a province scope to work properly
# "Imports" slaves from the originally hunted province (current scope) where they are being abducted to the "origin" province (first scope) where they are later traded from, via a nifty while effect

#Abduct Enslaved Population
abduct_enslaved_population_to_slavery_origin_province_CTD_effect = {
	# Currently in hunted province scope
	change_variable = {
		which = slave_abduction_helper_variable
		which = province_slaves_production
	}
	while = {
		limit = {
			check_variable = {
				which = slave_abduction_helper_variable
				value = 1
			}
		}
		PREV = {	# The "origin" province
			change_variable = {
				which = province_slaves_brought_to
				value = 1
			}
		}
		subtract_variable = {	# Important: Don't do this in prev scope, man! You need to keep track of your scopes, silly.
			which = slave_abduction_helper_variable
			value = 1
		}
	}
	set_variable = {
		which = slave_abduction_helper_variable
		value = 0
	}
}


### Update "Generic" Holding Supply
## This MUST be called in an province scope to work properly
# Updates the amount of "generic" supply that is gained directly from the holdings

# Update Holding Supply
update_province_holding_supply_CTD_effect = {
	# First: substract current helper variables from province supply
	subtract_variable = {
		which = province_supply_food
		which = helper_province_supply_food_holdings
	}
	subtract_variable = {
		which = province_supply_clothing
		which = helper_province_supply_clothing_holdings
	}
	subtract_variable = {
		which = province_supply_materials
		which = helper_province_supply_materials_holdings
	}
	subtract_variable = {
		which = province_supply_luxuries
		which = helper_province_supply_luxuries_holdings
	}
	# Second: clear/reset current helper variables
	set_variable = {
		which = helper_province_supply_food_holdings
		value = 0
	}
	set_variable = {
		which = helper_province_supply_clothing_holdings
		value = 0
	}
	set_variable = {
		which = helper_province_supply_materials_holdings
		value = 0
	}
	set_variable = {
		which = helper_province_supply_luxuries_holdings
		value = 0
	}
	# Third: Recalculate helper variables
	any_province_holding = {
		if = {	# For castles
			limit = {
				holding_type = castle
			}
			PREV = {	# The province
				change_variable = {
					which = helper_province_supply_food_holdings
					value = 2
				}
				change_variable = {
					which = helper_province_supply_clothing_holdings
					value = 2
				}
				change_variable = {
					which = helper_province_supply_materials_holdings
					value = 3
				}
				change_variable = {
					which = helper_province_supply_luxuries_holdings
					value = 1
				}
			}
		}
		if = {	# For cities
			limit = {
				holding_type = city
			}
			PREV = {	# The province
				change_variable = {
					which = helper_province_supply_food_holdings
					value = 2
				}
				change_variable = {
					which = helper_province_supply_clothing_holdings
					value = 2
				}
				change_variable = {
					which = helper_province_supply_materials_holdings
					value = 2
				}
				change_variable = {
					which = helper_province_supply_luxuries_holdings
					value = 2
				}
			}
		}
		if = {	# For temples
			limit = {
				holding_type = temple
			}
			PREV = {	# The province
				change_variable = {
					which = helper_province_supply_food_holdings
					value = 3
				}
				change_variable = {
					which = helper_province_supply_clothing_holdings
					value = 2
				}
				change_variable = {
					which = helper_province_supply_materials_holdings
					value = 2
				}
				change_variable = {
					which = helper_province_supply_luxuries_holdings
					value = 1
				}
			}
		}
		if = {	# For tribals
			limit = {
				holding_type = tribal
			}
			PREV = {	# The province
				change_variable = {
					which = helper_province_supply_food_holdings
					value = 2
				}
				change_variable = {
					which = helper_province_supply_clothing_holdings
					value = 2
				}
				change_variable = {
					which = helper_province_supply_materials_holdings
					value = 2
				}
				# Tribals produce no luxuries
			}
		}
		if = {	# For nomads
			limit = {
				holding_type = nomad
			}
			PREV = {	# The province
				change_variable = {
					which = helper_province_supply_food_holdings
					value = 2
				}
				change_variable = {
					which = helper_province_supply_clothing_holdings
					value = 2
				}
				change_variable = {
					which = helper_province_supply_materials_holdings
					value = 1
				}
				# Tribals produce no luxuries
			}
		}
	}
	# Fourth: Add helper supply to province supply
	change_variable = {
		which = province_supply_food
		which = helper_province_supply_food_holdings
	}
	change_variable = {
		which = province_supply_clothing
		which = helper_province_supply_clothing_holdings
	}
	change_variable = {
		which = province_supply_materials
		which = helper_province_supply_materials_holdings
	}
	change_variable = {
		which = province_supply_luxuries
		which = helper_province_supply_luxuries_holdings
	}
	# NOTE: Just a reminder, do not clear the helper variables! They are needed when this effect here is called next time!
}


### Assign Climate
## This MUST be called in an province scope to work properly
# Assigns a climate for every province

# Assign a climate on startup
assign_climate_on_startup_CTD_effect = {
	# Assign Climates:
	# A
	# Af
	if = {
		limit = {
			OR = {
				# Sri Lanka:
				province_id = 1215
				province_id = 1279
			}
		}
		set_province_flag = climate_koeppen_A_f
	}
	# Am
	if = {
		limit = {
			OR = {
				# Sri Lanka:
				province_id = 1414
				# Maldives:
				province_id = 1360
				# South-West Coast of India:
				province_id = 1413
				province_id = 1114
				province_id = 1117
				province_id = 1200
				province_id = 1124
				province_id = 1220
				province_id = 1125
				# Eastern Edge of India:
				province_id = 1318
				province_id = 1131
				province_id = 1324
				province_id = 1381
			}
		}
		set_province_flag = climate_koeppen_A_m
	}
	# As
	if = {
		limit = {
			OR = {
				# Sri Lanka:
				province_id = 1194
				province_id = 1195
				# South India:
				province_id = 1214
				# Central India:
				province_id = 1164
				province_id = 1170
				province_id = 1150
				province_id = 1288
				province_id = 1148
			}
		}
		set_province_flag = climate_koeppen_A_s
	}
	# Aw
	if = {
		limit = {
			OR = {
				# India - East:
				province_id = 1325
				province_id = 1151
				province_id = 1243
				province_id = 1242
				province_id = 1237
				province_id = 1238
				province_id = 1232
				province_id = 1235
				province_id = 1236
				province_id = 1240
				province_id = 1323
				province_id = 1293
				province_id = 1233
				province_id = 1239
				# India - Central East:
				province_id = 1247
				province_id = 1231
				province_id = 1129
				province_id = 1225
				province_id = 1224
				province_id = 1128
				province_id = 1415
				province_id = 1123
				province_id = 1221
				province_id = 1207
				province_id = 1208
				province_id = 1222
				province_id = 1252
				province_id = 1157
				province_id = 1258
				province_id = 1259
				province_id = 1261
				province_id = 1285
				province_id = 1286
				province_id = 1159
				province_id = 1270
				province_id = 1272
				province_id = 1277
				province_id = 1249
				province_id = 1156
				province_id = 1229
				province_id = 1228
				province_id = 1226
				province_id = 1227
				province_id = 1269
				province_id = 1254
				province_id = 1160
				province_id = 1155
				province_id = 1230
				# India - South:
				province_id = 1204
				province_id = 1119
				province_id = 1115
				province_id = 1112
				province_id = 1116
				province_id = 1219
				province_id = 1120
				province_id = 1216
				province_id = 1196
				# India - South-West:
				province_id = 1197
				province_id = 1140
				province_id = 1198
				province_id = 1416
				province_id = 1213
				province_id = 1260
				province_id = 1264
				province_id = 1126
				province_id = 1127
				province_id = 1133
				province_id = 1289
				# Africa - South-East:
				province_id = 873
				province_id = 883
				province_id = 1436
				province_id = 885
				province_id = 881
				province_id = 1428
				# Africa - South-West:
				province_id = 863
				province_id = 923
				province_id = 1542
				province_id = 925
				province_id = 1538
				province_id = 1537
				province_id = 915
				province_id = 1539
				province_id = 1544
				province_id = 1543
				province_id = 926
				province_id = 1547
			}
		}
		set_province_flag = climate_koeppen_A_w
	}
	# B
	# BW
	# BWh
	if = {
		limit = {
			OR = {
				# Africa - West:
				province_id = 922
				province_id = 914
				province_id = 917
				province_id = 919
				province_id = 1541
				province_id = 920
				province_id = 921
				province_id = 862
				province_id = 916
				# Africa - North:
				province_id = 1553
				province_id = 849
				province_id = 1554
				province_id = 847
				province_id = 918
				province_id = 824
				province_id = 818
				province_id = 814
				province_id = 829
				province_id = 825
				province_id = 830
				province_id = 836
				province_id = 809
				province_id = 805
				province_id = 804
				province_id = 803
				province_id = 802
				province_id = 799
				province_id = 798
				province_id = 789
				province_id = 797
				province_id = 801
				province_id = 796
				province_id = 790
				province_id = 800
				province_id = 1468
				province_id = 795
				province_id = 791
				province_id = 794
				province_id = 1334
				province_id = 1467
				province_id = 792
				# Africa - East:
				province_id = 1332
				province_id = 1330
				province_id = 793
				province_id = 1373
				province_id = 1379
				province_id = 1549
				province_id = 1320
				province_id = 1335
				province_id = 861
				province_id = 1343
				province_id = 880
				province_id = 1437
				province_id = 1322
				province_id = 878
				province_id = 879
				province_id = 1326
				province_id = 874
				province_id = 872
				province_id = 871
				province_id = 1369
				# Middle East - Levant & Mesopotamia:
				province_id = 788
				province_id = 787
				province_id = 786
				province_id = 784
				province_id = 722
				province_id = 783
				province_id = 1531
				province_id = 1530
				province_id = 724
				province_id = 714
				province_id = 726
				province_id = 713
				province_id = 727
				province_id = 729
				province_id = 711
				province_id = 712
				province_id = 715
				province_id = 695
				province_id = 692
				province_id = 696
				province_id = 693
				province_id = 654
				province_id = 655
				province_id = 691
				province_id = 689
				province_id = 656
				province_id = 690
				province_id = 648
				province_id = 649
				# Middle East - Arabia:
				province_id = 721
				province_id = 720
				province_id = 1640
				province_id = 1639
				province_id = 864
				province_id = 718
				province_id = 1638
				province_id = 719
				province_id = 857
				province_id = 1380
				province_id = 1644
				province_id = 858
				province_id = 1637
				province_id = 856
				province_id = 855
				province_id = 866
				province_id = 869
				province_id = 868
				province_id = 867
				province_id = 1642
				province_id = 870
				province_id = 652
				province_id = 1643
				province_id = 653
				province_id = 651
				province_id = 865
				province_id = 1641
				province_id = 717
				province_id = 716
				# Persia - South-East:
				province_id = 642
				province_id = 641
				province_id = 854
				province_id = 637
				province_id = 853
				province_id = 899
				province_id = 894
				province_id = 1275
				province_id = 299
				province_id = 1183
				province_id = 1113
				province_id = 1139
				province_id = 1370
				# India - West:
				province_id = 1297
				province_id = 1303
				province_id = 1138
				province_id = 1333
				province_id = 1137
				province_id = 1331
				province_id = 1295
				province_id = 1294
				province_id = 1174
				province_id = 1130
				province_id = 1176
				province_id = 1354
				province_id = 1350
				province_id = 1352
				province_id = 1363
				province_id = 1361
				province_id = 1178
				province_id = 1349
				province_id = 1304
				province_id = 1336
				province_id = 1175
			}
		}
		set_province_flag = climate_koeppen_B_W_h
	}
	# BWk
	if = {
		limit = {
			OR = {
				# Africa - North:
				province_id = 837
				# Middle East - Sinai:
				province_id = 785
				province_id = 782
				# Arabia - Yemen:
				province_id = 860
				# Persia - South:
				province_id = 639
				province_id = 906
				province_id = 852
				province_id = 1371
				province_id = 1372
				# Steppes - Karakum Desert:
				province_id = 631
				province_id = 627
				province_id = 629
				province_id = 630
				province_id = 1649
				province_id = 628
				province_id = 902
				province_id = 901
				province_id = 900
				province_id = 623
				province_id = 621
				province_id = 624
				province_id = 625
				province_id = 1378
				province_id = 626
				# Steppes - Tarim Basin:
				province_id = 1626
				province_id = 1627
				province_id = 1628
				province_id = 1445
				province_id = 1629
				province_id = 1444
				province_id = 1443
				province_id = 1622
				province_id = 1621
				province_id = 1442
				province_id = 1663
				province_id = 1441
				province_id = 1623
				province_id = 1624
				province_id = 1440
				province_id = 1625
				province_id = 1438
				# Steppes - East:
				province_id = 1449
				province_id = 1452
				province_id = 1620
				province_id = 1447
				province_id = 1619
				province_id = 1616
				province_id = 1657
				province_id = 1614
				province_id = 1615
				province_id = 1456
				province_id = 1453
				province_id = 1450
				province_id = 1448
				province_id = 1408
			}
		}
		set_province_flag = climate_koeppen_B_W_k
	}
	# BS
	# BSh
	if = {
		limit = {
			OR = {
				# Africa - West:
				province_id = 927
				province_id = 928
				province_id = 911
				province_id = 1540
				province_id = 913
				province_id = 912
				province_id = 1546
				province_id = 1545
				# Africa - North:
				province_id = 843
				province_id = 816
				province_id = 815
				province_id = 813
				province_id = 811
				province_id = 810
				province_id = 807
				province_id = 806
				# Africa - East:
				province_id = 1636
				province_id = 875
				province_id = 876
				province_id = 1280
				province_id = 877
				province_id = 1429
				province_id = 1417
				# Asia Minor - Cyprus:
				province_id = 757
				# Middle East - Levant & Mesopotamia:
				province_id = 781
				province_id = 779
				province_id = 709
				province_id = 710
				province_id = 698
				province_id = 697
				province_id = 687
				province_id = 694
				province_id = 647
				province_id = 645
				province_id = 643
				# Persia - Central:
				province_id = 636
				province_id = 638
				# India - West:
				province_id = 1339
				province_id = 1337
				province_id = 1338
				province_id = 1340
				province_id = 1192
				province_id = 1362
				province_id = 1364
				province_id = 1366
				province_id = 1359
				province_id = 1172
				province_id = 1355
				province_id = 1357
				province_id = 1353
				province_id = 1346
				province_id = 1300
				province_id = 1302
				province_id = 1345
				province_id = 1291
				province_id = 1292
				province_id = 1290
				province_id = 1135
				province_id = 1266
				province_id = 1134
				province_id = 1136
				province_id = 1268
				province_id = 1267
				# India - Central-South:
				province_id = 1149
				province_id = 1147
				province_id = 1287
				province_id = 1262
				province_id = 1263
				province_id = 1145
				province_id = 1142
				province_id = 1212
				province_id = 1158
				province_id = 1255
				province_id = 1256
				province_id = 1144
				province_id = 1209
				province_id = 1253
				province_id = 1122
				province_id = 1199
				province_id = 1217
				province_id = 1118
				province_id = 1121
				province_id = 1202
				province_id = 1218
				province_id = 1203
				province_id = 1211
				province_id = 1257
				province_id = 1210
				province_id = 1265
				province_id = 1206
				province_id = 1146
				province_id = 1143
				# India - South:
				province_id = 1201
			}
		}
		set_province_flag = climate_koeppen_B_S_h
	}
	# BSk
	if = {
		limit = {
			OR = {
				# Europe - Spain:
				province_id = 197
				province_id = 168
				province_id = 169
				province_id = 170
				province_id = 179
				province_id = 172
				# Africa - North:
				province_id = 846
				province_id = 845
				province_id = 834
				province_id = 833
				province_id = 823
				# Asia Minor:
				province_id = 759
				province_id = 668
				province_id = 667
				# Middle East - Levant:
				province_id = 778
				province_id = 777
				province_id = 723
				province_id = 773
				province_id = 725
				province_id = 769
				province_id = 728
				province_id = 730
				province_id = 708
				# Persia - Central:
				province_id = 640
				province_id = 1555
				province_id = 644
				province_id = 646
				province_id = 659
				# Persia - East:
				province_id = 1191
				province_id = 1375
				province_id = 1374
				province_id = 1184
				province_id = 1557
				# Steppes - Karakum Desert:
				province_id = 604
				province_id = 620
				province_id = 617
				province_id = 618
				province_id = 897
				province_id = 896
				province_id = 622
				province_id = 1273
				province_id = 1433
				province_id = 1434
				province_id = 1426
				province_id = 1432
				province_id = 1431
				province_id = 1186
				province_id = 1181
				province_id = 903
				province_id = 1561
				province_id = 1562
				province_id = 1648
				province_id = 1647
				province_id = 905
				province_id = 1646
				province_id = 1645
				province_id = 634
				province_id = 632
				province_id = 635
				# Steppes - East:
				province_id = 1457
				province_id = 1458
				province_id = 1459
				province_id = 1455
				province_id = 1617
				province_id = 1618
				province_id = 1446
				# Steppes - Tian Shan:
				province_id = 1425
				province_id = 1423
				province_id = 1559
				# Himalayas - North-East:
				province_id = 1681
				province_id = 1661
				province_id = 1599
				province_id = 1662
				# Himalayas - South-East:
				province_id = 1594
				# Himalayas - West:
				province_id = 1464
				province_id = 1667
				# Himalayas - South:
				province_id = 1658
			}
		}
		set_province_flag = climate_koeppen_B_S_k
	}
	# C
	# Cs
	# Csa
	if = {
		limit = {
			OR = {
				# India - Central:
				province_id = 1299
				province_id = 1298
				province_id = 1274
				province_id = 1171
				province_id = 1301
				province_id = 1169
				# Himalayas - Hindu Kush:
				province_id = 1342
				province_id = 904
				province_id = 1560
				province_id = 1188
				# Persia - Caspian Sea:
				province_id = 633
				province_id = 661
				province_id = 662
				province_id = 666
				# Middle East - Levant & Mesopotamia:
				province_id = 657
				province_id = 688
				province_id = 1552
				province_id = 685
				province_id = 684
				province_id = 700
				province_id = 683
				province_id = 701
				province_id = 702
				province_id = 699
				province_id = 734
				province_id = 735
				province_id = 763
				province_id = 733
				province_id = 764
				province_id = 766
				province_id = 765
				province_id = 732
				province_id = 731
				province_id = 768
				province_id = 767
				province_id = 770
				province_id = 771
				province_id = 772
				province_id = 775
				province_id = 774
				province_id = 776
				province_id = 780
				# Asia Minor - South-West:
				province_id = 762
				province_id = 761
				province_id = 756
				province_id = 758
				province_id = 747
				province_id = 746
				province_id = 748
				province_id = 745
				province_id = 744
				province_id = 743
				# Europe - Greece:
				province_id = 496
				province_id = 495
				province_id = 494
				province_id = 491
				province_id = 487
				province_id = 486
				province_id = 489
				province_id = 1612
				province_id = 488
				province_id = 485
				province_id = 484
				province_id = 483
				province_id = 480
				province_id = 479
				province_id = 482
				province_id = 481
				province_id = 478
				province_id = 477
				province_id = 476
				province_id = 474
				province_id = 475
				province_id = 473
				province_id = 1495
				province_id = 472
				province_id = 1610
				province_id = 470
				province_id = 1633
				province_id = 468
				province_id = 467
				# Europe - Italy:
				province_id = 345
				province_id = 344
				province_id = 337
				province_id = 338
				province_id = 343
				province_id = 812
				province_id = 342
				province_id = 341
				province_id = 340
				province_id = 935
				province_id = 334
				province_id = 851
				province_id = 1503
				province_id = 333
				province_id = 243
				province_id = 332
				province_id = 331
				province_id = 327
				province_id = 323
				province_id = 1526
				province_id = 233
				province_id = 1523
				province_id = 1654
				province_id = 1529
				province_id = 325
				province_id = 326
				# Europe - France:
				province_id = 220
				province_id = 212
				province_id = 211
				# Europe - Spain:
				province_id = 205
				province_id = 204
				province_id = 173
				province_id = 826
				province_id = 827
				province_id = 1532
				province_id = 170
				province_id = 171
				province_id = 178
				province_id = 177
				province_id = 1492
				province_id = 196
				province_id = 1494
				province_id = 180
				province_id = 167
				province_id = 166
				province_id = 165
				province_id = 164
				province_id = 163
				province_id = 162
				province_id = 161
				province_id = 186
				province_id = 1490
				province_id = 193
				province_id = 185
				province_id = 183
				province_id = 182
				province_id = 181
				province_id = 184
				province_id = 195
				# Africa - North
				province_id = 839
				province_id = 841
				province_id = 844
				province_id = 840
				province_id = 838
				province_id = 835
				province_id = 832
				province_id = 831
				province_id = 828
				province_id = 822
				province_id = 821
				province_id = 820
				province_id = 819
				province_id = 817
				province_id = 808
			}
		}
		set_province_flag = climate_koeppen_C_s_a
	}
	# Csb
	if = {
		limit = {
			OR = {
				# Africa - North:
				province_id = 842
				# Europe - Spain:
				province_id = 160
				province_id = 159
				province_id = 187
				province_id = 192
				province_id = 194
				province_id = 198
				province_id = 191
				province_id = 188
				province_id = 189
				province_id = 156
				province_id = 157
				province_id = 158
				province_id = 203
				# Europe - France:
				province_id = 221
				province_id = 230
				province_id = 1524
				province_id = 1525
				province_id = 324
				province_id = 1653
				# Europe - Italy:
				province_id = 336
				province_id = 339
				province_id = 1655
				# Europe - Greece:
				province_id = 1611
				# Asia Minor - West:
				province_id = 755
				province_id = 754
				province_id = 749
				province_id = 742
				province_id = 750
				province_id = 753
				province_id = 760
				province_id = 752
			}
		}
		set_province_flag = climate_koeppen_C_s_b
	}
	# Cw
	# Cwa
	if = {
		limit = {
			OR = {
				# Middle East - Arabia:
				province_id = 859
				# India - North:
				province_id = 1177
				province_id = 1418
				province_id = 1296
				province_id = 1246
				province_id = 1321
				province_id = 1244
				province_id = 1153
				province_id = 1419
				province_id = 1152
				province_id = 1234
				province_id = 1154
				province_id = 1276
				province_id = 1327
				province_id = 1241
				province_id = 1248
				province_id = 1271
				province_id = 1165
				province_id = 1278
				province_id = 1281
				province_id = 1251
				province_id = 1162
				province_id = 1420
				province_id = 1328
				province_id = 1163
				province_id = 1166
				province_id = 1421
				province_id = 1250
				province_id = 1284
				province_id = 1283
				province_id = 1356
				province_id = 1167
				province_id = 1422
				province_id = 1358
				province_id = 1141
				province_id = 1365
				province_id = 1173
				province_id = 1168
				province_id = 1368
				province_id = 1367
				province_id = 1193
				province_id = 1179
				province_id = 1190
				province_id = 1319
				province_id = 1575
			}
		}
		set_province_flag = climate_koeppen_C_w_a
	}
	# Cwb
	if = {
		limit = {
			OR = {
				# Africa - East:
				province_id = 884
				province_id = 882
				# India - North:
				province_id = 1245
				province_id = 1582
				province_id = 1581
				province_id = 1580
				province_id = 1579
				province_id = 1578
				province_id = 1577
				province_id = 1576
				province_id = 1573
				province_id = 1572
				province_id = 1571
				province_id = 1569
				province_id = 1568
			}
		}
		set_province_flag = climate_koeppen_C_w_b
	}
	# Cf
	# Cfa
	if = {
		limit = {
			OR = {
				# India - North-West:
				province_id = 1180
				province_id = 1341
				# Asia Minor - North-East:
				province_id = 670
				province_id = 669
				province_id = 673
				province_id = 675
				province_id = 677
				# Steppes - Crimea:
				province_id = 598
				province_id = 562
				province_id = 561
				province_id = 560
				province_id = 559
				province_id = 558
				# Europe - Romania:
				province_id = 511
				province_id = 510
				province_id = 514
				province_id = 515
				province_id = 516
				province_id = 498
				province_id = 499
				# Europe - Greece:
				province_id = 492
				province_id = 490
				# Europe - Balkans:
				province_id = 469
				province_id = 1504
				province_id = 1505
				province_id = 466
				province_id = 465
				province_id = 459
				province_id = 458
				# Europe - Italy:
				province_id = 356
				province_id = 357
				province_id = 355
				province_id = 319
				province_id = 354
				province_id = 320
				province_id = 234
				province_id = 232
				province_id = 353
				province_id = 352
				province_id = 351
				province_id = 350
				province_id = 1528
				province_id = 330
				province_id = 348
				province_id = 347
				province_id = 346
			}
		}
		set_province_flag = climate_koeppen_C_f_a
	}
	# Cfb
	if = {
		limit = {
			OR = {
				# India - North-West:
				province_id = 1161
				# Steppes - Crimea:
				province_id = 600
				# Asia Minor - North:
				province_id = 679
				province_id = 678
				province_id = 705
				province_id = 738
				province_id = 739
				province_id = 740
				province_id = 741
				# Europe - Romania:
				province_id = 512
				province_id = 509
				province_id = 508
				province_id = 497
				province_id = 506
				# Europe - Greece:
				province_id = 493
				province_id = 471
				province_id = 501
				# Europe - Balkans:
				province_id = 1632
				province_id = 505
				province_id = 517
				province_id = 521
				province_id = 522
				province_id = 523
				province_id = 538
				province_id = 524
				province_id = 444
				province_id = 443
				province_id = 445
				province_id = 450
				province_id = 454
				province_id = 460
				province_id = 461
				province_id = 451
				province_id = 464
				province_id = 1551
				province_id = 463
				province_id = 1634
				province_id = 1550
				province_id = 518
				province_id = 452
				province_id = 453
				province_id = 462
				province_id = 1651
				province_id = 457
				# Europe - Italy:
				province_id = 335
				province_id = 1502
				province_id = 929
				province_id = 349
				province_id = 329
				province_id = 328
				province_id = 322
				province_id = 321
				province_id = 1527
				province_id = 1521
				province_id = 1522
				province_id = 1519
				province_id = 235
				province_id = 318
				province_id = 358
				# Europe - Spain:
				province_id = 155
				province_id = 190
				province_id = 1493
				province_id = 154
				province_id = 153
				province_id = 199
				province_id = 200
				province_id = 175
				province_id = 176
				province_id = 1491
				province_id = 174
				province_id = 202
				province_id = 201
				province_id = 152
				province_id = 207
				province_id = 206
				# Europe - France:
				AND = {
					region = world_europe_west_francia
					NOR = {
						province_id = 211
						province_id = 212
						province_id = 220
						province_id = 221
						province_id = 230
					}
				}
				# Europe - Germany:
				AND = {
					region = world_europe_west_germania
					NOR = {
						province_id = 237
						province_id = 241
						province_id = 238
						province_id = 244
						province_id = 245
						province_id = 246
						province_id = 247
						province_id = 248
						province_id = 316
						province_id = 359
						province_id = 448
						province_id = 449
						province_id = 455
						province_id = 456
						province_id = 436
						province_id = 440
						province_id = 369
					}
				}
				# Europe - UK:
				AND = {
					region = world_europe_west_brittania
					NOR = {
						province_id = 1483
						province_id = 39
						province_id = 1485
						province_id = 44
					}
				}
				# Europe - Denmark:
				region = custom_denmark
				# Europe - Poland:
				province_id = 435
				province_id = 433
				province_id = 526
				province_id = 527
				province_id = 528
				province_id = 432
				province_id = 429
				province_id = 431
				province_id = 430
				province_id = 434
				# Europe - Scandinavia:
				province_id = 275
				province_id = 274
				province_id = 269
				province_id = 268
				province_id = 270
				province_id = 271
				province_id = 296
				province_id = 295
				province_id = 297
				province_id = 298
				province_id = 931
				province_id = 300
				province_id = 301
				province_id = 292
				province_id = 293
				province_id = 932
				# Europe - North Sea:
				province_id = 36
			}
		}
		set_province_flag = climate_koeppen_C_f_b
	}
	# Cfc
	if = {
		limit = {
			OR = {
				# Europe - UK:
				province_id = 1483
				province_id = 39
				province_id = 1485
				province_id = 44
				# Europe - North Sea:
				province_id = 34
				province_id = 33
				province_id = 1
			}
		}
		set_province_flag = climate_koeppen_C_f_c
	}
	# D
	# Ds
	# Dsa
	if = {
		limit = {
			OR = {
				# Persia - North:
				province_id = 665
				province_id = 1650
				province_id = 686
				province_id = 658
				province_id = 1556
				province_id = 664
				# India - West:
				province_id = 1376
				# Steppes - South-East:
				province_id = 1424
			}
		}
		set_province_flag = climate_koeppen_D_s_a
	}
	# Dsb
	if = {
		limit = {
			OR = {
				# Asia Minor - Central:
				province_id = 751
				province_id = 737
				province_id = 736
				province_id = 707
				province_id = 706
				province_id = 703
				province_id = 681
				province_id = 682
				# Persia - North:
				province_id = 663
				province_id = 660
				# Himalayas - Hindu Kush:
				province_id = 907
				province_id = 1182
				province_id = 1185
				province_id = 1187
				province_id = 1563
				province_id = 1558
				
			}
		}
		set_province_flag = climate_koeppen_D_s_b
	}
	# Dsc
	if = {
		limit = {
			OR = {
				# Himalayas - Hindu Kush
				province_id = 1377
				province_id = 1189
				province_id = 1609
				province_id = 1439
				province_id = 1558
			}
		}
		set_province_flag = climate_koeppen_D_s_c
	}
	# Dw
	# Dwc
	if = {
		limit = {
			OR = {
				# Steppes - North-East:
				province_id = 1460
				province_id = 1461
				# Himalayas - East:
				province_id = 1600
				province_id = 1670
				province_id = 1604
				# Himalayas - South:
				province_id = 1595
				province_id = 1596
				province_id = 1597
				province_id = 1590
				province_id = 1591
				province_id = 1682
			}
		}
		set_province_flag = climate_koeppen_D_w_c
	}
	# Df
	# Dfa
	if = {
		limit = {
			OR = {
				# Steppes - Central-East:
				province_id = 1427
				province_id = 1451
				# Steppes - West:
				province_id = 895
				province_id = 608
				province_id = 619
				province_id = 595
				province_id = 594
				province_id = 596
				province_id = 607
				province_id = 605
				province_id = 606
				province_id = 603
				province_id = 597
				province_id = 599
				province_id = 557
				province_id = 542
			}
		}
		set_province_flag = climate_koeppen_D_f_a
	}
	# Dfb
	if = {
		limit = {
			OR = {
				# Europe - Slavic Realms:
				AND = {
					OR = {
						region = custom_livonia
						region = custom_lithuania
						region = custom_rus
						region = custom_novgorod
						region = custom_muscovy
					}
					NOR = {
						province_id = 404
						province_id = 405
					}
				}
				province_id = 369
				province_id = 428
				province_id = 529
				province_id = 530
				province_id = 531
				province_id = 532
				province_id = 525
				province_id = 442
				province_id = 440
				province_id = 436
				province_id = 543
				province_id = 541
				province_id = 513
				province_id = 545
				province_id = 519
				province_id = 520
				province_id = 537
				province_id = 533
				# Europe - Alps:
				province_id = 449
				province_id = 448
				province_id = 455
				province_id = 456
				province_id = 231
				province_id = 1520
				province_id = 237
				province_id = 241
				province_id = 244
				province_id = 245
				province_id = 248
				province_id = 317
				# Europe - Balkans:
				province_id = 500
				province_id = 507
				province_id = 502
				province_id = 503
				province_id = 504
				# Asia Minor - Caucasus:
				province_id = 674
				province_id = 671
				province_id = 672
				province_id = 1013
				province_id = 680
				province_id = 704
				province_id = 602
				# Himalayas - West:
				province_id = 1589
				province_id = 1588
				province_id = 1564
				# Steppes - North:
				AND = {
					OR = {
						region = custom_cuman
						region = custom_volga
					}
					NOR = {
						province_id = 893
						province_id = 1427
						province_id = 1434
						province_id = 1433
						province_id = 1273
						province_id = 896
						province_id = 897
					}
				}
				province_id = 886
				province_id = 924
				province_id = 566
				province_id = 565
				province_id = 564
				province_id = 563
				# Europe - Scandinavia:
				province_id = 381
				province_id = 382
				province_id = 291
				province_id = 286
				province_id = 290
				province_id = 289
				province_id = 294
				province_id = 288
				province_id = 272
			}
		}
		set_province_flag = climate_koeppen_D_f_b
	}
	# Dfc
	if = {
		limit = {
			OR = {
				# Himalayas - West:
				province_id = 1570
				province_id = 1585
				province_id = 1567
				province_id = 1566
				# Asia Minor - North-East:
				province_id = 676
				province_id = 601
				# Europe - Carpathians:
				province_id = 539
				province_id = 540
				# Europe - Alps:
				province_id = 359
				province_id = 316
				province_id = 247
				province_id = 246
				province_id = 238
				province_id = 236
				# Europe - Scandinavia:
				province_id = 273
				province_id = 276
				province_id = 287
				province_id = 285
				province_id = 284
				province_id = 277
				province_id = 278
				province_id = 282
				province_id = 283
				province_id = 281
				province_id = 279
				province_id = 280
				province_id = 386
				province_id = 387
				province_id = 850
				province_id = 385
				province_id = 384
				province_id = 383
				province_id = 390
				province_id = 392
				province_id = 388
				province_id = 393
				# Europe - Perm:
				province_id = 404
				province_id = 403
				province_id = 394
				province_id = 395
				province_id = 396
				province_id = 397
				province_id = 398
				province_id = 399
				province_id = 405
				province_id = 402
				province_id = 400
				province_id = 612
				province_id = 888
				province_id = 889
				# Steppes - North:
				province_id = 887
				province_id = 1223
				province_id = 890
				province_id = 893
				province_id = 1205
				province_id = 1463
				province_id = 1462
				province_id = 1454
			}
		}
		set_province_flag = climate_koeppen_D_f_c
	}
	# E
	# ET
	if = {
		limit = {
			NOR = {
				# fills every province that has no other climate defined yet:
				has_province_flag = climate_koeppen_A_f
				has_province_flag = climate_koeppen_A_m
				has_province_flag = climate_koeppen_A_s
				has_province_flag = climate_koeppen_A_w
				has_province_flag = climate_koeppen_B_W_h
				has_province_flag = climate_koeppen_B_W_k
				has_province_flag = climate_koeppen_B_S_h
				has_province_flag = climate_koeppen_B_S_k
				has_province_flag = climate_koeppen_C_s_a
				has_province_flag = climate_koeppen_C_s_b
				has_province_flag = climate_koeppen_C_w_a
				has_province_flag = climate_koeppen_C_w_b
				has_province_flag = climate_koeppen_C_f_a
				has_province_flag = climate_koeppen_C_f_b
				has_province_flag = climate_koeppen_C_f_c
				has_province_flag = climate_koeppen_D_s_a
				has_province_flag = climate_koeppen_D_s_b
				has_province_flag = climate_koeppen_D_s_c
				has_province_flag = climate_koeppen_D_w_c
				has_province_flag = climate_koeppen_D_f_a
				has_province_flag = climate_koeppen_D_f_b
				has_province_flag = climate_koeppen_D_f_c
			}
		}
		set_province_flag = climate_koeppen_E_T
	}
}


### Set Weather Effect
## These MUST be called in an province scope to work properly
# Changes the current weather effect in modifier localisation - and applies it to the province, of course!

# Good
weather_agriculture_good_CTD_effect = {
	# Localisation:
	# Clear all old effects
	clr_province_flag = weather_agriculture_effect_neutral
	clr_province_flag = weather_agriculture_effect_bad
	clr_province_flag = weather_agriculture_effect_catastrophic
	# Set new effect
	set_province_flag = weather_agriculture_effect_good
	# Effects:
	# NOTE: needs to be done later...
}
# Neutral
weather_agriculture_neutral_CTD_effect = {
	# Localisation:
	# Clear all old effects
	clr_province_flag = weather_agriculture_effect_good
	clr_province_flag = weather_agriculture_effect_bad
	clr_province_flag = weather_agriculture_effect_catastrophic
	# Set new effect
	set_province_flag = weather_agriculture_effect_neutral
	# Effects:
	# NOTE: needs to be done later...
}
# Bad
weather_agriculture_bad_CTD_effect = {
	# Localisation:
	# Clear all old effects
	clr_province_flag = weather_agriculture_effect_good
	clr_province_flag = weather_agriculture_effect_neutral
	clr_province_flag = weather_agriculture_effect_catastrophic
	# Set new effect
	set_province_flag = weather_agriculture_effect_bad
	# Effects:
	# NOTE: needs to be done later...
}
# Catastrophic
weather_agriculture_catastrophic_CTD_effect = {
	# Localisation:
	# Clear all old effects
	clr_province_flag = weather_agriculture_effect_good
	clr_province_flag = weather_agriculture_effect_neutral
	clr_province_flag = weather_agriculture_effect_bad
	# Set new effect
	set_province_flag = weather_agriculture_effect_catastrophic
	# Effects:
	# NOTE: needs to be done later...
}


### Call Weather Effect
## These MUST be called in an province scope to work properly
# Calles the current weather's effect based on season

# Mild
mild_weather_agriculture_effect_CTD_effect = {
	if = {
		limit = {
			has_province_flag = season_spring
		}
		weather_agriculture_good_CTD_effect = yes	# Solely for testing
	}
	if = {
		limit = {
			has_province_flag = season_summer
		}
		weather_agriculture_neutral_CTD_effect = yes	# Solely for testing
	}
	if = {
		limit = {
			has_province_flag = season_autumn
		}
		weather_agriculture_bad_CTD_effect = yes	# Solely for testing
	}
	if = {
		limit = {
			has_province_flag = season_winter
		}
		weather_agriculture_catastrophic_CTD_effect = yes	# Solely for testing
	}
	if = {
		limit = {
			has_province_flag = season_monsoon
		}
		weather_agriculture_catastrophic_CTD_effect = yes	# Solely for testing
	}
	if = {
		limit = {
			has_province_flag = season_pre_winter
		}
		weather_agriculture_neutral_CTD_effect = yes	# Solely for testing
	}
	if = {
		limit = {
			has_province_flag = season_dry_season
		}
		weather_agriculture_good_CTD_effect = yes	# Solely for testing
	}
	if = {
		limit = {
			has_province_flag = season_wet_season
		}
		weather_agriculture_bad_CTD_effect = yes	# Solely for testing
	}
}
# Hailstorms
hailstorms_weather_agriculture_effect_CTD_effect = {
	if = {
		limit = {
			has_province_flag = season_spring
		}
		weather_agriculture_bad_CTD_effect = yes	# Solely for testing
	}
	if = {
		limit = {
			has_province_flag = season_summer
		}
		weather_agriculture_catastrophic_CTD_effect = yes	# Solely for testing
	}
	if = {
		limit = {
			has_province_flag = season_autumn
		}
		weather_agriculture_neutral_CTD_effect = yes	# Solely for testing
	}
	if = {
		limit = {
			has_province_flag = season_winter
		}
		weather_agriculture_good_CTD_effect = yes	# Solely for testing
	}
	if = {
		limit = {
			has_province_flag = season_monsoon
		}
		weather_agriculture_neutral_CTD_effect = yes	# Solely for testing
	}
	if = {
		limit = {
			has_province_flag = season_pre_winter
		}
		weather_agriculture_neutral_CTD_effect = yes	# Solely for testing
	}
	if = {
		limit = {
			has_province_flag = season_dry_season
		}
		weather_agriculture_good_CTD_effect = yes	# Solely for testing
	}
	if = {
		limit = {
			has_province_flag = season_wet_season
		}
		weather_agriculture_neutral_CTD_effect = yes	# Solely for testing
	}
}


### Change Natural Feature
## This MUST be called in an province scope to work properly
# Adds or removes Natural Features from province, and adjusts all corresponding values, e.g. resource caps, supply

# Deep Woods
gain_deep_woods_CTD_effect = {
	# Modifier:
	add_province_modifier = {
		name = natural_feature_deep_woods
		duration = -1
	}
	# Supply:
	change_variable = {
		which = province_supply_food
		value = -1
	}
	change_variable = {
		which = province_supply_materials
		value = 1
	}
	# Resource Caps:
	change_variable = {
		which = province_cap_mining
		value = -1
	}
	change_variable = {
		which = province_cap_agriculture
		value = -1
	}
	change_variable = {
		which = province_cap_forests
		value = 2
	}
	change_variable = {
		which = province_cap_livestock
		value = -1
	}
	if = {
		limit = {
			has_province_flag = temp_cap_reduction_agriculture
		}
		match_dynamic_agriculture_cap_to_static_CTD_effect = yes
	}
	if = {
		limit = {
			has_province_flag = temp_cap_reduction_livestock
		}
		match_dynamic_livestock_cap_to_static_CTD_effect = yes
	}
	change_variable = {
		which = province_cap_wildlife
		value = 1
	}
	change_variable = {
		which = province_cap_vegetation
		value = 1
	}
}
remove_deep_woods_CTD_effect = {
	# Modifier:
	remove_province_modifier = natural_feature_deep_woods
	# Supply (inverted):
	change_variable = {
		which = province_supply_food
		value = 1
	}
	change_variable = {
		which = province_supply_materials
		value = -1
	}
	# Resource Caps (inverted):
	change_variable = {
		which = province_cap_mining
		value = 1
	}
	change_variable = {
		which = province_cap_agriculture
		value = 1
	}
	change_variable = {
		which = province_cap_forests
		value = -2
	}
	change_variable = {
		which = province_cap_livestock
		value = 1
	}
	if = {
		limit = {
			has_province_flag = temp_cap_reduction_agriculture
		}
		match_dynamic_agriculture_cap_to_static_CTD_effect = yes
	}
	if = {
		limit = {
			has_province_flag = temp_cap_reduction_livestock
		}
		match_dynamic_livestock_cap_to_static_CTD_effect = yes
	}
	change_variable = {
		which = province_cap_wildlife
		value = -1
	}
	change_variable = {
		which = province_cap_vegetation
		value = -1
	}
}

# Swamps
gain_swamps_CTD_effect = {
	# Modifier:
	add_province_modifier = {
		name = natural_feature_swamps
		duration = -1
	}
	# Supply:
	# Food: No change
	change_variable = {
		which = province_supply_materials
		value = 1
	}
	# Resource Caps:
	change_variable = {
		which = province_cap_mining
		value = -1
	}
	change_variable = {
		which = province_cap_agriculture
		value = -1
	}
	# Forests: No change
	change_variable = {
		which = province_cap_livestock
		value = -1
	}
	if = {
		limit = {
			has_province_flag = temp_cap_reduction_agriculture
		}
		match_dynamic_agriculture_cap_to_static_CTD_effect = yes
	}
	if = {
		limit = {
			has_province_flag = temp_cap_reduction_livestock
		}
		match_dynamic_livestock_cap_to_static_CTD_effect = yes
	}
	change_variable = {
		which = province_cap_wildlife
		value = 1
	}
	change_variable = {
		which = province_cap_vegetation
		value = 1
	}
	if = {
		limit = {
			OR = {
				port = yes
				borders_lake = yes
			}
		}
		change_variable = {
			which = province_cap_diving
			value = -1
		}
	}
}
remove_swamps_CTD_effect = {
	# Modifier:
	remove_province_modifier = natural_feature_swamps
	# Supply (inverted):
	# Food: No change
	change_variable = {
		which = province_supply_materials
		value = -1
	}
	# Resource Caps (inverted):
	change_variable = {
		which = province_cap_mining
		value = 1
	}
	change_variable = {
		which = province_cap_agriculture
		value = 1
	}
	# Forests: No change
	change_variable = {
		which = province_cap_livestock
		value = 1
	}
	if = {
		limit = {
			has_province_flag = temp_cap_reduction_agriculture
		}
		match_dynamic_agriculture_cap_to_static_CTD_effect = yes
	}
	if = {
		limit = {
			has_province_flag = temp_cap_reduction_livestock
		}
		match_dynamic_livestock_cap_to_static_CTD_effect = yes
	}
	change_variable = {
		which = province_cap_wildlife
		value = -1
	}
	change_variable = {
		which = province_cap_vegetation
		value = -1
	}
	if = {
		limit = {
			OR = {
				port = yes
				borders_lake = yes
			}
		}
		change_variable = {
			which = province_cap_diving
			value = 1
		}
	}
}

# Mangroves
gain_mangroves_CTD_effect = {
	# Modifier:
	add_province_modifier = {
		name = natural_feature_mangroves
		duration = -1
	}
	# Supply:
	change_variable = {
		which = province_supply_food
		value = 1
	}
	change_variable = {
		which = province_supply_materials
		value = 1
	}
	# Resource Caps:
	change_variable = {
		which = province_cap_mining
		value = -1
	}
	change_variable = {
		which = province_cap_agriculture
		value = -1
	}
	change_variable = {
		which = province_cap_forests
		value = 1
	}
	change_variable = {
		which = province_cap_livestock
		value = -1
	}
	if = {
		limit = {
			has_province_flag = temp_cap_reduction_agriculture
		}
		match_dynamic_agriculture_cap_to_static_CTD_effect = yes
	}
	if = {
		limit = {
			has_province_flag = temp_cap_reduction_livestock
		}
		match_dynamic_livestock_cap_to_static_CTD_effect = yes
	}
	# Wildlife: No change
	change_variable = {
		which = province_cap_vegetation
		value = 1
	}
	if = {
		limit = {
			OR = {
				port = yes
				borders_major_river = yes
				borders_lake = yes
			}
		}
		change_variable = {
			which = province_cap_fishing
			value = 1
		}
	}
	# Diving: No change
}
remove_mangroves_CTD_effect = {
	# Modifier:
	remove_province_modifier = natural_feature_mangroves
	# Supply (inverted):
	change_variable = {
		which = province_supply_food
		value = -1
	}
	change_variable = {
		which = province_supply_materials
		value = -1
	}
	# Resource Caps (inverted):
	change_variable = {
		which = province_cap_mining
		value = 1
	}
	change_variable = {
		which = province_cap_agriculture
		value = 1
	}
	change_variable = {
		which = province_cap_forests
		value = -1
	}
	change_variable = {
		which = province_cap_livestock
		value = 1
	}
	if = {
		limit = {
			has_province_flag = temp_cap_reduction_agriculture
		}
		match_dynamic_agriculture_cap_to_static_CTD_effect = yes
	}
	if = {
		limit = {
			has_province_flag = temp_cap_reduction_livestock
		}
		match_dynamic_livestock_cap_to_static_CTD_effect = yes
	}
	# Wildlife: No change
	change_variable = {
		which = province_cap_vegetation
		value = -1
	}
	if = {
		limit = {
			OR = {
				port = yes
				borders_major_river = yes
				borders_lake = yes
			}
		}
		change_variable = {
			which = province_cap_fishing
			value = -1
		}
	}
	# Diving: No change
}

# Heath
gain_heath_CTD_effect = {
	# Modifier:
	add_province_modifier = {
		name = natural_feature_heath
		duration = -1
	}
	# Supply:
	# Food: No change
	change_variable = {
		which = province_supply_materials
		value = -1
	}
	# Resource Caps:
	# Mining: No change
	change_variable = {
		which = province_cap_agriculture
		value = -1
	}
	change_variable = {
		which = province_cap_forests
		value = -1
	}
	# Livestock: No change
	if = {
		limit = {
			has_province_flag = temp_cap_reduction_agriculture
		}
		match_dynamic_agriculture_cap_to_static_CTD_effect = yes
	}
	# Wildlife: No change
	# Vegetation: No change
	# Fishing: No change
	# Diving: No change
}
remove_heath_CTD_effect = {
	# Modifier:
	remove_province_modifier = natural_feature_heath
	# Supply (inverted):
	# Food: No change
	change_variable = {
		which = province_supply_materials
		value = 1
	}
	# Resource Caps (inverted):
	# Mining: No change
	change_variable = {
		which = province_cap_agriculture
		value = 1
	}
	change_variable = {
		which = province_cap_forests
		value = 1
	}
	# Livestock: No change
	if = {
		limit = {
			has_province_flag = temp_cap_reduction_agriculture
		}
		match_dynamic_agriculture_cap_to_static_CTD_effect = yes
	}
	# Wildlife: No change
	# Vegetation: No change
	# Fishing: No change
	# Diving: No change
}

# Volcano
gain_volcano_CTD_effect = {
	# Modifier:
	add_province_modifier = {
		name = natural_feature_volcano
		duration = -1
	}
	# Supply:
	# Food: No change
	# Materials: No change
	# Resource Caps:
	change_variable = {
		which = province_cap_mining
		value = 1
	}
	change_variable = {
		which = province_cap_agriculture
		value = 2
	}
	change_variable = {
		which = province_cap_forests
		value = 1
	}
	# Livestock: No change
	if = {
		limit = {
			has_province_flag = temp_cap_reduction_agriculture
		}
		match_dynamic_agriculture_cap_to_static_CTD_effect = yes
	}
	# Wildlife: No change
	# Vegetation: No change
	# Fishing: No change
	# Diving: No change
}
remove_volcano_CTD_effect = {
	# Modifier:
	remove_province_modifier = natural_feature_volcano
	# Supply (inverted):
	# Food: No change
	# Materials: No change
	# Resource Caps (inverted):
	change_variable = {
		which = province_cap_mining
		value = -1
	}
	change_variable = {
		which = province_cap_agriculture
		value = -2
	}
	change_variable = {
		which = province_cap_forests
		value = -1
	}
	# Livestock: No change
	if = {
		limit = {
			has_province_flag = temp_cap_reduction_agriculture
		}
		match_dynamic_agriculture_cap_to_static_CTD_effect = yes
	}
	# Wildlife: No change
	# Vegetation: No change
	# Fishing: No change
	# Diving: No change
}

# Mountain Pass
gain_mountain_pass_CTD_effect = {
	# Modifier:
	add_province_modifier = {
		name = natural_feature_mountain_pass
		duration = -1
	}
	# Supply:
	# Food: No change
	# Materials: No change
	# Resource Caps:
	# Mining: No change
	# Agriculture: No change
	# Forests: No change
	# Livestock: No change
	# Wildlife: No change
	# Vegetation: No change
	# Fishing: No change
	# Diving: No change
}
remove_mountain_pass_CTD_effect = {
	# Modifier:
	remove_province_modifier = natural_feature_mountain_pass
	# Supply (inverted):
	# Food: No change
	# Materials: No change
	# Resource Caps (inverted):
	# Mining: No change
	# Agriculture: No change
	# Forests: No change
	# Livestock: No change
	# Wildlife: No change
	# Vegetation: No change
	# Fishing: No change
	# Diving: No change
}

# Hot Springs
gain_hot_springs_CTD_effect = {
	# Modifier:
	add_province_modifier = {
		name = natural_feature_hot_springs
		duration = -1
	}
	# Supply:
	# Food: No change
	# Materials: No change
	# Resource Caps:
	# Mining: No change
	change_variable = {
		which = province_cap_agriculture
		value = 1
	}
	# Forests: No change
	# Livestock: No change
	if = {
		limit = {
			has_province_flag = temp_cap_reduction_agriculture
		}
		match_dynamic_agriculture_cap_to_static_CTD_effect = yes
	}
	# Wildlife: No change
	# Vegetation: No change
	# Fishing: No change
	# Diving: No change
}
remove_hot_springs_CTD_effect = {
	# Modifier:
	remove_province_modifier = natural_feature_hot_springs
	# Supply (inverted):
	# Food: No change
	# Materials: No change
	# Resource Caps (inverted):
	# Mining: No change
	change_variable = {
		which = province_cap_agriculture
		value = -1
	}
	# Forests: No change
	# Livestock: No change
	if = {
		limit = {
			has_province_flag = temp_cap_reduction_agriculture
		}
		match_dynamic_agriculture_cap_to_static_CTD_effect = yes
	}
	# Wildlife: No change
	# Vegetation: No change
	# Fishing: No change
	# Diving: No change
}

# Estuary
gain_estuary_CTD_effect = {
	# Modifier:
	add_province_modifier = {
		name = natural_feature_estuary
		duration = -1
	}
	# Supply:
	change_variable = {
		which = province_supply_food
		value = 1
	}
	# Materials: No change
	# Resource Caps:
	# Mining: No change
	change_variable = {
		which = province_cap_agriculture
		value = 1
	}
	# Forests: No change
	# Livestock: No change
	if = {
		limit = {
			has_province_flag = temp_cap_reduction_agriculture
		}
		match_dynamic_agriculture_cap_to_static_CTD_effect = yes
	}
	# Wildlife: No change
	# Vegetation: No change
	if = {
		limit = {
			OR = {
				port = yes
				borders_major_river = yes
				borders_lake = yes
			}
		}
		change_variable = {
			which = province_cap_fishing
			value = 1
		}
	}
	if = {
		limit = {
			OR = {
				port = yes
				borders_lake = yes
			}
		}
		change_variable = {
			which = province_cap_diving
			value = 1
		}
	}
}
remove_estuary_CTD_effect = {
	# Modifier:
	remove_province_modifier = natural_feature_estuary
	# Supply (inverted):
	change_variable = {
		which = province_supply_food
		value = -1
	}
	# Materials: No change
	# Resource Caps (inverted):
	# Mining: No change
	change_variable = {
		which = province_cap_agriculture
		value = -1
	}
	# Forests: No change
	# Livestock: No change
	if = {
		limit = {
			has_province_flag = temp_cap_reduction_agriculture
		}
		match_dynamic_agriculture_cap_to_static_CTD_effect = yes
	}
	# Wildlife: No change
	# Vegetation: No change
	if = {
		limit = {
			OR = {
				port = yes
				borders_major_river = yes
				borders_lake = yes
			}
		}
		change_variable = {
			which = province_cap_fishing
			value = -1
		}
	}
	if = {
		limit = {
			OR = {
				port = yes
				borders_lake = yes
			}
		}
		change_variable = {
			which = province_cap_diving
			value = -1
		}
	}
}

# Natural Harbour
gain_natural_harbour_CTD_effect = {
	# Modifier:
	add_province_modifier = {
		name = natural_feature_natural_harbour
		duration = -1
	}
	# Supply:
	# Food: No change
	# Materials: No change
	# Resource Caps:
	# Mining: No change
	# Agriculture: No change
	# Forests: No change
	# Livestock: No change
	# Wildlife: No change
	# Vegetation: No change
	if = {
		limit = {
			OR = {
				port = yes
				borders_major_river = yes
				borders_lake = yes
			}
		}
		change_variable = {
			which = province_cap_fishing
			value = 1
		}
	}
	if = {
		limit = {
			OR = {
				port = yes
				borders_lake = yes
			}
		}
		change_variable = {
			which = province_cap_diving
			value = 1
		}
	}
}
remove_natural_harbour_CTD_effect = {
	# Modifier:
	remove_province_modifier = natural_feature_natural_harbour
	# Supply (inverted):
	# Food: No change
	# Materials: No change
	# Resource Caps (inverted):
	# Mining: No change
	# Agriculture: No change
	# Forests: No change
	# Livestock: No change
	# Wildlife: No change
	# Vegetation: No change
	if = {
		limit = {
			OR = {
				port = yes
				borders_major_river = yes
				borders_lake = yes
			}
		}
		change_variable = {
			which = province_cap_fishing
			value = -1
		}
	}
	if = {
		limit = {
			OR = {
				port = yes
				borders_lake = yes
			}
		}
		change_variable = {
			which = province_cap_diving
			value = -1
		}
	}
}

# Coral Reefs
gain_coral_reefs_CTD_effect = {
	# Modifier:
	add_province_modifier = {
		name = natural_feature_coral_reefs
		duration = -1
	}
	# Supply:
	change_variable = {
		which = province_supply_food
		value = 1
	}
	# Materials: No change
	# Resource Caps:
	# Mining: No change
	# Agriculture: No change
	# Forests: No change
	# Livestock: No change
	# Wildlife: No change
	# Vegetation: No change
	if = {
		limit = {
			OR = {
				port = yes
				borders_major_river = yes
				borders_lake = yes
			}
		}
		change_variable = {
			which = province_cap_fishing
			value = 2
		}
	}
	if = {
		limit = {
			OR = {
				port = yes
				borders_lake = yes
			}
		}
		change_variable = {
			which = province_cap_diving
			value = 3
		}
	}
}
remove_coral_reefs_CTD_effect = {
	# Modifier:
	remove_province_modifier = natural_feature_coral_reefs
	# Supply (inverted):
	change_variable = {
		which = province_supply_food
		value = -1
	}
	# Materials: No change
	# Resource Caps (inverted):
	# Mining: No change
	# Agriculture: No change
	# Forests: No change
	# Livestock: No change
	# Wildlife: No change
	# Vegetation: No change
	if = {
		limit = {
			OR = {
				port = yes
				borders_major_river = yes
				borders_lake = yes
			}
		}
		change_variable = {
			which = province_cap_fishing
			value = -2
		}
	}
	if = {
		limit = {
			OR = {
				port = yes
				borders_lake = yes
			}
		}
		change_variable = {
			which = province_cap_diving
			value = -3
		}
	}
}

# Flood Plains
gain_flood_plains_CTD_effect = {
	# Modifier:
	add_province_modifier = {
		name = natural_feature_flood_plains
		duration = -1
	}
	# Supply:
	change_variable = {
		which = province_supply_food
		value = 1
	}
	# Materials: No change
	# Resource Caps:
	# Mining: No change
	change_variable = {
		which = province_cap_agriculture
		value = 2
	}
	change_variable = {
		which = province_cap_forests
		value = -1
	}
	# Livestock: No change
	if = {
		limit = {
			has_province_flag = temp_cap_reduction_agriculture
		}
		match_dynamic_agriculture_cap_to_static_CTD_effect = yes
	}
	change_variable = {
		which = province_cap_wildlife
		value = 1
	}
	change_variable = {
		which = province_cap_vegetation
		value = 1
	}
	# Fishing: No change
	# Diving: No change
}
remove_flood_plains_CTD_effect = {
	# Modifier:
	remove_province_modifier = natural_feature_flood_plains
	# Supply (inverted):
	change_variable = {
		which = province_supply_food
		value = 1
	}
	# Materials: No change
	# Resource Caps (inverted):
	# Mining: No change
	change_variable = {
		which = province_cap_agriculture
		value = -2
	}
	change_variable = {
		which = province_cap_forests
		value = 1
	}
	# Livestock: No change
	if = {
		limit = {
			has_province_flag = temp_cap_reduction_agriculture
		}
		match_dynamic_agriculture_cap_to_static_CTD_effect = yes
	}
	# Wildlife: No change
	change_variable = {
		which = province_cap_wildlife
		value = -1
	}
	# Vegetation: No change
	change_variable = {
		which = province_cap_vegetation
		value = -1
	}
	# Fishing: No change
	# Diving: No change
}

# Salt Pans
gain_salt_pans_CTD_effect = {
	# Modifier:
	add_province_modifier = {
		name = natural_feature_salt_pans
		duration = -1
	}
	# Supply:
	change_variable = {
		which = province_supply_food
		value = -1
	}
	# Materials: No change
	# Resource Caps:
	change_variable = {
		which = province_cap_mining
		value = 1
	}
	change_variable = {
		which = province_cap_agriculture
		value = -1
	}
	change_variable = {
		which = province_cap_forests
		value = -1
	}
	change_variable = {
		which = province_cap_livestock
		value = -1
	}
	if = {
		limit = {
			has_province_flag = temp_cap_reduction_agriculture
		}
		match_dynamic_agriculture_cap_to_static_CTD_effect = yes
	}
	if = {
		limit = {
			has_province_flag = temp_cap_reduction_livestock
		}
		match_dynamic_livestock_cap_to_static_CTD_effect = yes
	}
	change_variable = {
		which = province_cap_wildlife
		value = -1
	}
	change_variable = {
		which = province_cap_vegetation
		value = -1
	}
	# Fishing: No change
	# Diving: No change
}
remove_salt_pans_CTD_effect = {
	# Modifier:
	remove_province_modifier = natural_feature_salt_pans
	# Supply (inverted):
	change_variable = {
		which = province_supply_food
		value = 1
	}
	# Materials: No change
	# Resource Caps (inverted):
	change_variable = {
		which = province_cap_mining
		value = -1
	}
	change_variable = {
		which = province_cap_agriculture
		value = 1
	}
	change_variable = {
		which = province_cap_forests
		value = 1
	}
	change_variable = {
		which = province_cap_livestock
		value = 1
	}
	if = {
		limit = {
			has_province_flag = temp_cap_reduction_agriculture
		}
		match_dynamic_agriculture_cap_to_static_CTD_effect = yes
	}
	if = {
		limit = {
			has_province_flag = temp_cap_reduction_livestock
		}
		match_dynamic_livestock_cap_to_static_CTD_effect = yes
	}
	change_variable = {
		which = province_cap_wildlife
		value = 1
	}
	change_variable = {
		which = province_cap_vegetation
		value = 1
	}
	# Fishing: No change
	# Diving: No change
}

# Caves
gain_caves_CTD_effect = {
	# Modifier:
	add_province_modifier = {
		name = natural_feature_caves
		duration = -1
	}
	# Supply:
	# Food: No change
	change_variable = {
		which = province_supply_materials
		value = 1
	}
	# Resource Caps:
	change_variable = {
		which = province_cap_mining
		value = 2
	}
	# Agriculture: No change
	# Forests: No change
	# Livestock: No change
	change_variable = {
		which = province_cap_wildlife
		value = 1
	}
	# Vegetation: No change
	# Fishing: No change
	# Diving: No change
}
remove_caves_CTD_effect = {
	# Modifier:
	remove_province_modifier = natural_feature_caves
	# Supply (inverted):
	# Food: No change
	change_variable = {
		which = province_supply_materials
		value = -1
	}
	# Resource Caps (inverted):
	change_variable = {
		which = province_cap_mining
		value = -2
	}
	# Agriculture: No change
	# Forests: No change
	# Livestock: No change
	change_variable = {
		which = province_cap_wildlife
		value = -1
	}
	# Vegetation: No change
	# Fishing: No change
	# Diving: No change
}

# Glaciers
gain_glaciers_CTD_effect = {
	# Modifier:
	add_province_modifier = {
		name = natural_feature_glaciers
		duration = -1
	}
	# Supply:
	change_variable = {
		which = province_supply_food
		value = -1
	}
	# Materials: No change
	# Resource Caps:
	# Mining: No change
	change_variable = {
		which = province_cap_agriculture
		value = -1
	}
	change_variable = {
		which = province_cap_forests
		value = -1
	}
	change_variable = {
		which = province_cap_livestock
		value = -1
	}
	if = {
		limit = {
			has_province_flag = temp_cap_reduction_agriculture
		}
		match_dynamic_agriculture_cap_to_static_CTD_effect = yes
	}
	if = {
		limit = {
			has_province_flag = temp_cap_reduction_livestock
		}
		match_dynamic_livestock_cap_to_static_CTD_effect = yes
	}
	# Wildlife: No change
	# Vegetation: No change
	change_variable = {
		which = province_cap_vegetation
		value = -2
	}
	# Fishing: No change
	# Diving: No change
}
remove_glaciers_CTD_effect = {
	# Modifier:
	remove_province_modifier = natural_feature_glaciers
	# Supply (inverted):
	change_variable = {
		which = province_supply_food
		value = 1
	}
	# Materials: No change
	# Resource Caps (inverted):
	# Mining: No change
	change_variable = {
		which = province_cap_agriculture
		value = 1
	}
	change_variable = {
		which = province_cap_forests
		value = 1
	}
	change_variable = {
		which = province_cap_livestock
		value = 1
	}
	if = {
		limit = {
			has_province_flag = temp_cap_reduction_agriculture
		}
		match_dynamic_agriculture_cap_to_static_CTD_effect = yes
	}
	if = {
		limit = {
			has_province_flag = temp_cap_reduction_livestock
		}
		match_dynamic_livestock_cap_to_static_CTD_effect = yes
	}
	# Wildlife: No change
	change_variable = {
		which = province_cap_vegetation
		value = 2
	}
	# Fishing: No change
	# Diving: No change
}


### Match dynamic caps static caps
## This MUST be called in an province scope to work properly
# Matches the dynamic caps for agriculture and livestock to changed static caps, taking into account disaster/weather

# Agriculture
match_dynamic_agriculture_cap_to_static_CTD_effect = {
	# Initialize
	set_variable = {
		which = province_cap_agriculture_dynamic
		which = province_cap_agriculture
	}
	set_variable = {
		which = dynamic_cap_helper_variable
		which = province_temporary_effect_on_agriculture
	}
	# "Divide" through 100 so can be used for caluclations (e.g. 50 "percent" -> 0.5)
	multiply_variable = {
		which = dynamic_cap_helper_variable
		value = 0.01
	}
	multiply_variable = {
		which = province_cap_agriculture_dynamic
		which = dynamic_cap_helper_variable
	}
}

# Livestock
match_dynamic_livestock_cap_to_static_CTD_effect = {
	# Initialize
	set_variable = {
		which = province_cap_livestock_dynamic
		which = province_cap_livestock
	}
	set_variable = {
		which = dynamic_cap_helper_variable
		which = province_temporary_effect_on_livestock
	}
	# "Divide" through 100 so can be used for caluclations (e.g. 50 "percent" -> 0.5)
	multiply_variable = {
		which = dynamic_cap_helper_variable
		value = 0.01
	}
	multiply_variable = {
		which = province_cap_livestock_dynamic
		which = dynamic_cap_helper_variable
	}
}


### Update Import Priority
## This MUST be called in an province scope to work properly
# Updates the province's import priority value based on several factors

# Update Import Priority
update_province_import_priority_CTD_effect = {
	# Reset first
	set_variable = {
		which = province_import_priority
		value = 0
	}
	# Trade Features
	if = {
		limit = {
			has_province_modifier = feature_staple_right
		}
		change_variable = {
			which = province_import_priority
			value = 10
		}
	}
	if = {
		limit = {
			has_province_modifier = feature_trade_fair
		}
		change_variable = {
			which = province_import_priority
			value = 3
		}
	}
	# Natural Features
	if = {
		limit = {
			has_province_modifier = natural_feature_estuary
		}
		change_variable = {
			which = province_import_priority
			value = 2
		}
	}
	if = {
		limit = {
			has_province_modifier = natural_feature_natural_harbour
		}
		change_variable = {
			which = province_import_priority
			value = 2
		}
	}
	# Infrastructure
	# Road: Cumultative, so only adds one amount per check!	# NOTE check if it is indeed cumultativ, this checking method
	if = {
		limit = {
			has_instances_of_province_modifier = {
				modifier = infrastructure_road_network
				amount = 1
			}
		}
		change_variable = {
			which = province_import_priority
			value = 4
		}
	}
	if = {
		limit = {
			has_instances_of_province_modifier = {
				modifier = infrastructure_road_network
				amount = 2
			}
		}
		change_variable = {
			which = province_import_priority
			value = 4
		}
	}
	if = {
		limit = {
			has_instances_of_province_modifier = {
				modifier = infrastructure_road_network
				amount = 3
			}
		}
		change_variable = {
			which = province_import_priority
			value = 4
		}
	}
	if = {
		limit = {
			has_instances_of_province_modifier = {
				modifier = infrastructure_road_network
				amount = 4
			}
		}
		change_variable = {
			which = province_import_priority
			value = 4
		}
	}
	# Bridge: Same as roads
	if = {
		limit = {
			has_instances_of_province_modifier = {
				modifier = infrastructure_major_bridge
				amount = 1
			}
		}
		change_variable = {
			which = province_import_priority
			value = 3
		}
	}
	if = {
		limit = {
			has_instances_of_province_modifier = {
				modifier = infrastructure_major_bridge
				amount = 2
			}
		}
		change_variable = {
			which = province_import_priority
			value = 3
		}
	}
	if = {
		limit = {
			has_instances_of_province_modifier = {
				modifier = infrastructure_major_bridge
				amount = 3
			}
		}
		change_variable = {
			which = province_import_priority
			value = 3
		}
	}
	# Holdings
	any_province_holding = {	# Scope to any holding so it gets done exactly <number_of_holdings> times. Easier than conditions here imo
		PREV = {	# The province
			change_variable = {
				which = province_import_priority
				value = 1
			}
		}
	}
	# Technology
	# again, cumultative
	if = {
		limit = {
			always = no # TESTING	#TECH_TRADE_PRACTICES = 1
		}
		change_variable = {
			which = province_import_priority
			value = 0.5
		}
	}
	if = {
		limit = {
			always = no # TESTING	#TECH_TRADE_PRACTICES = 2
		}
		change_variable = {
			which = province_import_priority
			value = 0.5
		}
	}
	if = {
		limit = {
			always = no # TESTING	#TECH_TRADE_PRACTICES = 3
		}
		change_variable = {
			which = province_import_priority
			value = 0.5
		}
	}
	if = {
		limit = {
			always = no # TESTING	#TECH_TRADE_PRACTICES = 4
		}
		change_variable = {
			which = province_import_priority
			value = 0.5
		}
	}
	if = {
		limit = {
			always = no # TESTING	#TECH_TRADE_PRACTICES = 5
		}
		change_variable = {
			which = province_import_priority
			value = 0.5
		}
	}
	if = {
		limit = {
			always = no # TESTING	#TECH_TRADE_PRACTICES = 6
		}
		change_variable = {
			which = province_import_priority
			value = 0.5
		}
	}
	if = {
		limit = {
			always = no # TESTING	#TECH_TRADE_PRACTICES = 7
		}
		change_variable = {
			which = province_import_priority
			value = 0.5
		}
	}
	if = {
		limit = {
			always = no # TESTING	#TECH_TRADE_PRACTICES = 8
		}
		change_variable = {
			which = province_import_priority
			value = 0.5
		}
	}
	# Population
	# done via helper variable
	# First: Merchants (+1 per 3)
	set_variable = {
		which = import_priority_helper
		which = province_population_merchants
	}
	divide_variable = {
		which = import_priority_helper
		value = 3
	}
	change_variable = {
		which = province_import_priority
		which = import_priority_helper
	}
	# Second: Patricians (+1 per 5)
	set_variable = {	# need to reset here first
		which = import_priority_helper
		value = 0
	}
	any_province_holding = {	# I'm again following the "cumultative approach" here - only inverted here ofc
		limit = {
			holding_type = city
		}
		if = {
			limit = {
				has_building = ct_population_patricians_5
			}
			change_variable = {
				which = import_priority_helper
				value = 0.2
			}
		}
		if = {
			limit = {
				has_building = ct_population_patricians_4
			}
			change_variable = {
				which = import_priority_helper
				value = 0.2
			}
		}
		if = {
			limit = {
				has_building = ct_population_patricians_3
			}
			change_variable = {
				which = import_priority_helper
				value = 0.2
			}
		}
		if = {
			limit = {
				has_building = ct_population_patricians_2
			}
			change_variable = {
				which = import_priority_helper
				value = 0.2
			}
		}
		if = {
			limit = {
				has_building = ct_population_patricians_1
			}
			change_variable = {
				which = import_priority_helper
				value = 0.2
			}
		}
	}
	change_variable = {
		which = province_import_priority
		which = import_priority_helper
	}
	# Third: Total Pops (+1 per 20)
	set_variable = {
		which = import_priority_helper
		which = province_population_total
	}
	divide_variable = {
		which = import_priority_helper
		value = 20
	}
	change_variable = {
		which = province_import_priority
		which = import_priority_helper
	}
	# Fourth: Reset Helper so it can be cleared from savegame
	set_variable = {
		which = import_priority_helper
		value = 0
	}
}


### Update Global Import Priority Levels
## This CAN be called in any scope to work properly, because it scopes to all provinces immediately anyway
# Rearranges the global import priority levels - expensive, so use sparingly

# Update Import Priority
update_global_import_priority_levels_CTD_effect = {
	# First reset global variables:
	set_variable = {
		which = global_import_priority_comparison_variable
		value = 0
	}
	set_variable = {
		which = global_priority_counting_helper_variable
		which = global_reference_number_of_provinces_variable	# Exact number of provinces in the game in this session!
	}
	# Second remove old flags:
	any_province = {	# NOTE: WARNING EXPENSIVE !
		clr_province_flag = import_priority_10
		clr_province_flag = import_priority_9
		clr_province_flag = import_priority_8
		clr_province_flag = import_priority_7
		clr_province_flag = import_priority_6
		clr_province_flag = import_priority_5
		clr_province_flag = import_priority_4
		clr_province_flag = import_priority_3
		clr_province_flag = import_priority_2
		clr_province_flag = import_priority_1
		clr_province_flag = had_import_priority_tested
	}
	# Third check which province has the highest value:
	while = {
		limit = {
			check_variable = {	# simple counting
				which = global_priority_counting_helper_variable
				value = 1	# INFO: Need to check for 1 and not 0, otherwise fires one time too often!
			}
		}
		random_province = {	# Scope to a random of the remaining provinces
			limit = {
				NOT = {
					has_province_flag = had_import_priority_tested
				}
			}
			if = {
				limit = {
					check_variable = {	# Check if local variable is bigger (or equal) than golbal one
						which = province_import_priority
						which = global_import_priority_comparison_variable
					}
				}
				set_variable = {	# Copy local province value to global comparison variable
					which = global_import_priority_comparison_variable
					which = province_import_priority
				}
			}
			set_province_flag = had_import_priority_tested
			add_province_modifier = {	# TESTING
				name = testy_the_test_modifier
				duration = -1
				stacking = yes
			}
		}
		change_variable = {	# Counting
			which = global_priority_counting_helper_variable
			value = -1
		}
	}
	# Fourth (re-)initialize a global helper variable:
	set_variable = {
		which = global_priority_sorting_helper_variable
		which = global_import_priority_comparison_variable
	}
	multiply_variable = {	# set to 10% of value
		which = global_priority_sorting_helper_variable
		value = 0.1
	}
	# Fifth sort the provinces according to the new ranking:
	any_province = {	# NOTE: WARNING EXPENSIVE !
		if = {
			limit = {
				NOR = {	# Check if local variable is smaller than the helper one (and thus lower than the current X%)
					check_variable = {
						which = province_import_priority
						which = global_priority_sorting_helper_variable
					}
					# province level flags are not yet relevant since none have been applied hitherto
				}
			}
			set_province_flag = import_priority_1
		}
	}
	# Go to next priority level
	set_variable = {
		which = global_priority_sorting_helper_variable
		which = global_import_priority_comparison_variable
	}
	multiply_variable = {	# set to 20% of value
		which = global_priority_sorting_helper_variable
		value = 0.2
	}
	any_province = {	# NOTE: WARNING EXPENSIVE !
		if = {
			limit = {
				NOR = {	# Check if local variable is smaller than the helper one (and thus lower than the current X%)
					check_variable = {
						which = province_import_priority
						which = global_priority_sorting_helper_variable
					}
					has_province_flag = import_priority_1
				}
			}
			set_province_flag = import_priority_2
		}
	}
	# Go to next priority level
	set_variable = {
		which = global_priority_sorting_helper_variable
		which = global_import_priority_comparison_variable
	}
	multiply_variable = {	# set to 30% of value
		which = global_priority_sorting_helper_variable
		value = 0.3
	}
	any_province = {	# NOTE: WARNING EXPENSIVE !
		if = {
			limit = {
				NOR = {	# Check if local variable is smaller than the helper one (and thus lower than the current X%)
					check_variable = {
						which = province_import_priority
						which = global_priority_sorting_helper_variable
					}
					has_province_flag = import_priority_1
					has_province_flag = import_priority_2
				}
			}
			set_province_flag = import_priority_3
		}
	}
	# Go to next priority level
	set_variable = {
		which = global_priority_sorting_helper_variable
		which = global_import_priority_comparison_variable
	}
	multiply_variable = {	# set to 40% of value
		which = global_priority_sorting_helper_variable
		value = 0.4
	}
	any_province = {	# NOTE: WARNING EXPENSIVE !
		if = {
			limit = {
				NOR = {	# Check if local variable is smaller than the helper one (and thus lower than the current X%)
					check_variable = {
						which = province_import_priority
						which = global_priority_sorting_helper_variable
					}
					has_province_flag = import_priority_1
					has_province_flag = import_priority_2
					has_province_flag = import_priority_3
				}
			}
			set_province_flag = import_priority_4
		}
	}
	# Go to next priority level
	set_variable = {
		which = global_priority_sorting_helper_variable
		which = global_import_priority_comparison_variable
	}
	multiply_variable = {	# set to 50% of value
		which = global_priority_sorting_helper_variable
		value = 0.5
	}
	any_province = {	# NOTE: WARNING EXPENSIVE !
		if = {
			limit = {
				NOR = {	# Check if local variable is smaller than the helper one (and thus lower than the current X%)
					check_variable = {
						which = province_import_priority
						which = global_priority_sorting_helper_variable
					}
					has_province_flag = import_priority_1
					has_province_flag = import_priority_2
					has_province_flag = import_priority_3
					has_province_flag = import_priority_4
				}
			}
			set_province_flag = import_priority_5
		}
	}
	# Go to next priority level
	set_variable = {
		which = global_priority_sorting_helper_variable
		which = global_import_priority_comparison_variable
	}
	multiply_variable = {	# set to 60% of value
		which = global_priority_sorting_helper_variable
		value = 0.6
	}
	any_province = {	# NOTE: WARNING EXPENSIVE !
		if = {
			limit = {
				NOR = {	# Check if local variable is smaller than the helper one (and thus lower than the current X%)
					check_variable = {
						which = province_import_priority
						which = global_priority_sorting_helper_variable
					}
					has_province_flag = import_priority_1
					has_province_flag = import_priority_2
					has_province_flag = import_priority_3
					has_province_flag = import_priority_4
					has_province_flag = import_priority_5
				}
			}
			set_province_flag = import_priority_6
		}
	}
	# Go to next priority level
	set_variable = {
		which = global_priority_sorting_helper_variable
		which = global_import_priority_comparison_variable
	}
	multiply_variable = {	# set to 70% of value
		which = global_priority_sorting_helper_variable
		value = 0.7
	}
	any_province = {	# NOTE: WARNING EXPENSIVE !
		if = {
			limit = {
				NOR = {	# Check if local variable is smaller than the helper one (and thus lower than the current X%)
					check_variable = {
						which = province_import_priority
						which = global_priority_sorting_helper_variable
					}
					has_province_flag = import_priority_1
					has_province_flag = import_priority_2
					has_province_flag = import_priority_3
					has_province_flag = import_priority_4
					has_province_flag = import_priority_5
					has_province_flag = import_priority_6
				}
			}
			set_province_flag = import_priority_7
		}
	}
	# Go to next priority level
	set_variable = {
		which = global_priority_sorting_helper_variable
		which = global_import_priority_comparison_variable
	}
	multiply_variable = {	# set to 80% of value
		which = global_priority_sorting_helper_variable
		value = 0.8
	}
	any_province = {	# NOTE: WARNING EXPENSIVE !
		if = {
			limit = {
				NOR = {	# Check if local variable is smaller than the helper one (and thus lower than the current X%)
					check_variable = {
						which = province_import_priority
						which = global_priority_sorting_helper_variable
					}
					has_province_flag = import_priority_1
					has_province_flag = import_priority_2
					has_province_flag = import_priority_3
					has_province_flag = import_priority_4
					has_province_flag = import_priority_5
					has_province_flag = import_priority_6
					has_province_flag = import_priority_7
				}
			}
			set_province_flag = import_priority_8
		}
	}
	# Go to next priority level
	set_variable = {
		which = global_priority_sorting_helper_variable
		which = global_import_priority_comparison_variable
	}
	multiply_variable = {	# set to 90% of value
		which = global_priority_sorting_helper_variable
		value = 0.9
	}
	any_province = {	# NOTE: WARNING EXPENSIVE !
		if = {
			limit = {
				NOR = {	# Check if local variable is smaller than the helper one (and thus lower than the current X%)
					check_variable = {
						which = province_import_priority
						which = global_priority_sorting_helper_variable
					}
					has_province_flag = import_priority_1
					has_province_flag = import_priority_2
					has_province_flag = import_priority_3
					has_province_flag = import_priority_4
					has_province_flag = import_priority_5
					has_province_flag = import_priority_6
					has_province_flag = import_priority_7
					has_province_flag = import_priority_8
				}
			}
			set_province_flag = import_priority_9
		}
	}
	# Going to the next priority level is now irrelevant, as only one level remains
	any_province = {	# NOTE: WARNING EXPENSIVE !
		if = {
			limit = {
				NOR = {
					# Test for not-assigned province suffices
					has_province_flag = import_priority_1
					has_province_flag = import_priority_2
					has_province_flag = import_priority_3
					has_province_flag = import_priority_4
					has_province_flag = import_priority_5
					has_province_flag = import_priority_6
					has_province_flag = import_priority_7
					has_province_flag = import_priority_8
					has_province_flag = import_priority_9
				}
			}
			set_province_flag = import_priority_10
		}
	}
	# Sixth reset the helper variable:
	set_variable = {
		which = global_priority_sorting_helper_variable
		value = 0
	}
	set_variable = {
		which = global_priority_counting_helper_variable
		value = 0
	}
}
